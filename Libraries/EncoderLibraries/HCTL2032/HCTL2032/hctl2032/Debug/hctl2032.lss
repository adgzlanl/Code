
hctl2032.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800200  00000ed2  00000f66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ed2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c6  00800224  00800224  00000f8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000076c1  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013c2  00000000  00000000  0000896d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018d0  00000000  00000000  00009d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000820  00000000  00000000  0000b600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c04  00000000  00000000  0000be20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003041  00000000  00000000  0000da24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  00010a65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	15 c1       	rjmp	.+554    	; 0x22c <__ctors_end>
   2:	00 00       	nop
   4:	41 c1       	rjmp	.+642    	; 0x288 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c1       	rjmp	.+638    	; 0x288 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c1       	rjmp	.+634    	; 0x288 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c1       	rjmp	.+630    	; 0x288 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c1       	rjmp	.+626    	; 0x288 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c1       	rjmp	.+622    	; 0x288 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c1       	rjmp	.+618    	; 0x288 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c1       	rjmp	.+614    	; 0x288 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c1       	rjmp	.+610    	; 0x288 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c1       	rjmp	.+606    	; 0x288 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c1       	rjmp	.+602    	; 0x288 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c1       	rjmp	.+598    	; 0x288 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c1       	rjmp	.+594    	; 0x288 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c1       	rjmp	.+590    	; 0x288 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c1       	rjmp	.+586    	; 0x288 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c1       	rjmp	.+582    	; 0x288 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c1       	rjmp	.+578    	; 0x288 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c1       	rjmp	.+574    	; 0x288 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c1       	rjmp	.+570    	; 0x288 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c1       	rjmp	.+566    	; 0x288 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c1       	rjmp	.+562    	; 0x288 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c1       	rjmp	.+558    	; 0x288 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6f c5       	rjmp	.+2782   	; 0xb3c <__vector_23>
  5e:	00 00       	nop
  60:	13 c1       	rjmp	.+550    	; 0x288 <__bad_interrupt>
  62:	00 00       	nop
  64:	e7 c3       	rjmp	.+1998   	; 0x834 <__vector_25>
  66:	00 00       	nop
  68:	1b c4       	rjmp	.+2102   	; 0x8a0 <__vector_26>
  6a:	00 00       	nop
  6c:	0d c1       	rjmp	.+538    	; 0x288 <__bad_interrupt>
  6e:	00 00       	nop
  70:	0b c1       	rjmp	.+534    	; 0x288 <__bad_interrupt>
  72:	00 00       	nop
  74:	09 c1       	rjmp	.+530    	; 0x288 <__bad_interrupt>
  76:	00 00       	nop
  78:	07 c1       	rjmp	.+526    	; 0x288 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	05 c1       	rjmp	.+522    	; 0x288 <__bad_interrupt>
  7e:	00 00       	nop
  80:	03 c1       	rjmp	.+518    	; 0x288 <__bad_interrupt>
  82:	00 00       	nop
  84:	01 c1       	rjmp	.+514    	; 0x288 <__bad_interrupt>
  86:	00 00       	nop
  88:	ff c0       	rjmp	.+510    	; 0x288 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	fd c0       	rjmp	.+506    	; 0x288 <__bad_interrupt>
  8e:	00 00       	nop
  90:	fb c0       	rjmp	.+502    	; 0x288 <__bad_interrupt>
  92:	00 00       	nop
  94:	f9 c0       	rjmp	.+498    	; 0x288 <__bad_interrupt>
  96:	00 00       	nop
  98:	f7 c0       	rjmp	.+494    	; 0x288 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	f5 c0       	rjmp	.+490    	; 0x288 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	f3 c0       	rjmp	.+486    	; 0x288 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	f1 c0       	rjmp	.+482    	; 0x288 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	ef c0       	rjmp	.+478    	; 0x288 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	ed c0       	rjmp	.+474    	; 0x288 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	eb c0       	rjmp	.+470    	; 0x288 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	e9 c0       	rjmp	.+466    	; 0x288 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	e7 c0       	rjmp	.+462    	; 0x288 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	e5 c0       	rjmp	.+458    	; 0x288 <__bad_interrupt>
  be:	00 00       	nop
  c0:	e3 c0       	rjmp	.+454    	; 0x288 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	e1 c0       	rjmp	.+450    	; 0x288 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	df c0       	rjmp	.+446    	; 0x288 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	dd c0       	rjmp	.+442    	; 0x288 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	db c0       	rjmp	.+438    	; 0x288 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	d9 c0       	rjmp	.+434    	; 0x288 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	d7 c0       	rjmp	.+430    	; 0x288 <__bad_interrupt>
  da:	00 00       	nop
  dc:	d5 c0       	rjmp	.+426    	; 0x288 <__bad_interrupt>
  de:	00 00       	nop
  e0:	d3 c0       	rjmp	.+422    	; 0x288 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	6f 06       	cpc	r6, r31
  e6:	72 06       	cpc	r7, r18
  e8:	61 06       	cpc	r6, r17
  ea:	65 06       	cpc	r6, r21
  ec:	6b 06       	cpc	r6, r27
  ee:	a9 06       	cpc	r10, r25
  f0:	76 06       	cpc	r7, r22
  f2:	7a 06       	cpc	r7, r26
  f4:	80 06       	cpc	r8, r16
  f6:	84 06       	cpc	r8, r20
  f8:	88 06       	cpc	r8, r24
  fa:	8e 06       	cpc	r8, r30
  fc:	92 06       	cpc	r9, r18
  fe:	96 06       	cpc	r9, r22
 100:	a9 06       	cpc	r10, r25
 102:	9c 06       	cpc	r9, r28
 104:	a0 06       	cpc	r10, r16
 106:	a4 06       	cpc	r10, r20

00000108 <__trampolines_end>:
 108:	00 00       	nop
 10a:	0a 0b       	sbc	r16, r26
 10c:	02 09       	sbc	r16, r2
 10e:	0c 0d       	add	r16, r12
 110:	0e 08       	sbc	r0, r14
 112:	07 03       	mulsu	r16, r23
 114:	04 01       	movw	r0, r8
	...
 132:	00 00       	nop
 134:	12 11       	cpse	r17, r2
 136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
 14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
 15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
 16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
 17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
 18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
 194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
 1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
 1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
 1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
 20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
 228:	82 02       	muls	r24, r18
 22a:	82 04       	cpc	r8, r2

0000022c <__ctors_end>:
 22c:	11 24       	eor	r1, r1
 22e:	1f be       	out	0x3f, r1	; 63
 230:	cf ef       	ldi	r28, 0xFF	; 255
 232:	d1 e2       	ldi	r29, 0x21	; 33
 234:	de bf       	out	0x3e, r29	; 62
 236:	cd bf       	out	0x3d, r28	; 61
 238:	00 e0       	ldi	r16, 0x00	; 0
 23a:	0c bf       	out	0x3c, r16	; 60

0000023c <__do_copy_data>:
 23c:	12 e0       	ldi	r17, 0x02	; 2
 23e:	a0 e0       	ldi	r26, 0x00	; 0
 240:	b2 e0       	ldi	r27, 0x02	; 2
 242:	e2 ed       	ldi	r30, 0xD2	; 210
 244:	fe e0       	ldi	r31, 0x0E	; 14
 246:	00 e0       	ldi	r16, 0x00	; 0
 248:	0b bf       	out	0x3b, r16	; 59
 24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x14>
 24c:	07 90       	elpm	r0, Z+
 24e:	0d 92       	st	X+, r0
 250:	a4 32       	cpi	r26, 0x24	; 36
 252:	b1 07       	cpc	r27, r17
 254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0x10>

00000256 <__do_clear_bss>:
 256:	22 e0       	ldi	r18, 0x02	; 2
 258:	a4 e2       	ldi	r26, 0x24	; 36
 25a:	b2 e0       	ldi	r27, 0x02	; 2
 25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
 25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
 260:	aa 3e       	cpi	r26, 0xEA	; 234
 262:	b2 07       	cpc	r27, r18
 264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>

00000266 <__do_global_ctors>:
 266:	11 e0       	ldi	r17, 0x01	; 1
 268:	c6 e1       	ldi	r28, 0x16	; 22
 26a:	d1 e0       	ldi	r29, 0x01	; 1
 26c:	00 e0       	ldi	r16, 0x00	; 0
 26e:	05 c0       	rjmp	.+10     	; 0x27a <__do_global_ctors+0x14>
 270:	21 97       	sbiw	r28, 0x01	; 1
 272:	01 09       	sbc	r16, r1
 274:	80 2f       	mov	r24, r16
 276:	fe 01       	movw	r30, r28
 278:	22 d6       	rcall	.+3140   	; 0xebe <__tablejump2__>
 27a:	c4 31       	cpi	r28, 0x14	; 20
 27c:	d1 07       	cpc	r29, r17
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	08 07       	cpc	r16, r24
 282:	b1 f7       	brne	.-20     	; 0x270 <__do_global_ctors+0xa>
 284:	6d d3       	rcall	.+1754   	; 0x960 <main>
 286:	23 c6       	rjmp	.+3142   	; 0xece <_exit>

00000288 <__bad_interrupt>:
 288:	bb ce       	rjmp	.-650    	; 0x0 <__vectors>

0000028a <_ZNK8HCTL20328ReadByteEv>:

	EncoderReset();
}

byte HCTL2032::ReadByte() const
{
 28a:	cf 92       	push	r12
 28c:	df 92       	push	r13
 28e:	ef 92       	push	r14
 290:	ff 92       	push	r15
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	8c 01       	movw	r16, r24
	byte SumByte = (digitalRead(encoderPinD7) << 7) +
 29c:	fc 01       	movw	r30, r24
 29e:	86 8d       	ldd	r24, Z+30	; 0x1e
 2a0:	c4 d5       	rcall	.+2952   	; 0xe2a <digitalRead>
 2a2:	d8 2f       	mov	r29, r24
	(digitalRead(encoderPinD6) << 6) +
 2a4:	f8 01       	movw	r30, r16
 2a6:	84 8d       	ldd	r24, Z+28	; 0x1c
 2a8:	c0 d5       	rcall	.+2944   	; 0xe2a <digitalRead>
	(digitalRead(encoderPinD5) << 5) +
	(digitalRead(encoderPinD4) << 4) +
	(digitalRead(encoderPinD3) << 3) +
	(digitalRead(encoderPinD2) << 2) +
	(digitalRead(encoderPinD1) << 1) +
	digitalRead(encoderPinD0);
 2aa:	82 95       	swap	r24
 2ac:	88 0f       	add	r24, r24
 2ae:	88 0f       	add	r24, r24
 2b0:	80 7c       	andi	r24, 0xC0	; 192
 2b2:	c8 2f       	mov	r28, r24
 2b4:	f0 e8       	ldi	r31, 0x80	; 128
 2b6:	df 9f       	mul	r29, r31
 2b8:	c0 19       	sub	r28, r0
 2ba:	11 24       	eor	r1, r1

byte HCTL2032::ReadByte() const
{
	byte SumByte = (digitalRead(encoderPinD7) << 7) +
	(digitalRead(encoderPinD6) << 6) +
	(digitalRead(encoderPinD5) << 5) +
 2bc:	f8 01       	movw	r30, r16
 2be:	82 8d       	ldd	r24, Z+26	; 0x1a
 2c0:	b4 d5       	rcall	.+2920   	; 0xe2a <digitalRead>
 2c2:	c8 2e       	mov	r12, r24
	(digitalRead(encoderPinD4) << 4) +
 2c4:	f8 01       	movw	r30, r16
 2c6:	80 8d       	ldd	r24, Z+24	; 0x18
 2c8:	b0 d5       	rcall	.+2912   	; 0xe2a <digitalRead>
 2ca:	d8 2e       	mov	r13, r24
	(digitalRead(encoderPinD3) << 3) +
 2cc:	f8 01       	movw	r30, r16
 2ce:	86 89       	ldd	r24, Z+22	; 0x16
 2d0:	ac d5       	rcall	.+2904   	; 0xe2a <digitalRead>
 2d2:	e8 2e       	mov	r14, r24
	(digitalRead(encoderPinD2) << 2) +
 2d4:	f8 01       	movw	r30, r16
 2d6:	84 89       	ldd	r24, Z+20	; 0x14
 2d8:	a8 d5       	rcall	.+2896   	; 0xe2a <digitalRead>
 2da:	d8 2f       	mov	r29, r24
	(digitalRead(encoderPinD1) << 1) +
 2dc:	f8 01       	movw	r30, r16
 2de:	82 89       	ldd	r24, Z+18	; 0x12
 2e0:	a4 d5       	rcall	.+2888   	; 0xe2a <digitalRead>
 2e2:	f8 2e       	mov	r15, r24
	digitalRead(encoderPinD0);
 2e4:	f8 01       	movw	r30, r16
 2e6:	80 89       	ldd	r24, Z+16	; 0x10
 2e8:	a0 d5       	rcall	.+2880   	; 0xe2a <digitalRead>
 2ea:	8c 0f       	add	r24, r28
 2ec:	c8 2f       	mov	r28, r24
 2ee:	f0 e2       	ldi	r31, 0x20	; 32
 2f0:	cf 9e       	mul	r12, r31
 2f2:	c0 0d       	add	r28, r0
 2f4:	11 24       	eor	r1, r1
 2f6:	80 e1       	ldi	r24, 0x10	; 16
 2f8:	d8 9e       	mul	r13, r24
 2fa:	c0 0d       	add	r28, r0
 2fc:	11 24       	eor	r1, r1
 2fe:	98 e0       	ldi	r25, 0x08	; 8
 300:	e9 9e       	mul	r14, r25
 302:	c0 0d       	add	r28, r0
 304:	11 24       	eor	r1, r1
 306:	dd 0f       	add	r29, r29
 308:	dd 0f       	add	r29, r29
 30a:	cd 0f       	add	r28, r29
 30c:	8f 2d       	mov	r24, r15
 30e:	88 0f       	add	r24, r24

	return SumByte ;
}
 310:	8c 0f       	add	r24, r28
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	ff 90       	pop	r15
 31c:	ef 90       	pop	r14
 31e:	df 90       	pop	r13
 320:	cf 90       	pop	r12
 322:	08 95       	ret

00000324 <_ZNK8HCTL203212EncoderResetEv>:

void HCTL2032::EncoderReset() const
{
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	ec 01       	movw	r28, r24
	digitalWrite(encoderPinRSTX, LOW);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	8c 85       	ldd	r24, Y+12	; 0x0c
 32e:	4e d5       	rcall	.+2716   	; 0xdcc <digitalWrite>
	delayMicroseconds(20);
 330:	84 e1       	ldi	r24, 0x14	; 20
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	4d d4       	rcall	.+2202   	; 0xbd0 <delayMicroseconds>
	digitalWrite(encoderPinRSTX, HIGH);
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	8c 85       	ldd	r24, Y+12	; 0x0c
 33a:	48 d5       	rcall	.+2704   	; 0xdcc <digitalWrite>
	delayMicroseconds(20);
 33c:	84 e1       	ldi	r24, 0x14	; 20
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	47 d4       	rcall	.+2190   	; 0xbd0 <delayMicroseconds>
	digitalWrite(encoderPinRSTY, LOW);
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	8e 85       	ldd	r24, Y+14	; 0x0e
 346:	42 d5       	rcall	.+2692   	; 0xdcc <digitalWrite>
	delayMicroseconds(20);
 348:	84 e1       	ldi	r24, 0x14	; 20
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	41 d4       	rcall	.+2178   	; 0xbd0 <delayMicroseconds>
	digitalWrite(encoderPinRSTY, HIGH);
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	8e 85       	ldd	r24, Y+14	; 0x0e
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
	delayMicroseconds(20);
	digitalWrite(encoderPinRSTX, HIGH);
	delayMicroseconds(20);
	digitalWrite(encoderPinRSTY, LOW);
	delayMicroseconds(20);
	digitalWrite(encoderPinRSTY, HIGH);
 356:	3a c5       	rjmp	.+2676   	; 0xdcc <digitalWrite>

00000358 <_ZNK8HCTL203211EncoderInitEv>:


#include "HCTL2032.h"
#include "Arduino.h"
void HCTL2032::EncoderInit() const
{
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	ec 01       	movw	r28, r24
	pinMode(encoderPinXY, OUTPUT);
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	88 81       	ld	r24, Y
 362:	f8 d4       	rcall	.+2544   	; 0xd54 <pinMode>
	pinMode(encoderPinOE, OUTPUT);
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	8a 81       	ldd	r24, Y+2	; 0x02
 368:	f5 d4       	rcall	.+2538   	; 0xd54 <pinMode>
	pinMode(encoderPinSEL1, OUTPUT);
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	8c 81       	ldd	r24, Y+4	; 0x04
 36e:	f2 d4       	rcall	.+2532   	; 0xd54 <pinMode>
	pinMode(encoderPinSEL2, OUTPUT);
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	8e 81       	ldd	r24, Y+6	; 0x06
 374:	ef d4       	rcall	.+2526   	; 0xd54 <pinMode>
	pinMode(encoderPinRSTX, OUTPUT);
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	8c 85       	ldd	r24, Y+12	; 0x0c
 37a:	ec d4       	rcall	.+2520   	; 0xd54 <pinMode>
	pinMode(encoderPinRSTY, OUTPUT);
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	8e 85       	ldd	r24, Y+14	; 0x0e
 380:	e9 d4       	rcall	.+2514   	; 0xd54 <pinMode>
	pinMode(encoderPinD0, INPUT);
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	88 89       	ldd	r24, Y+16	; 0x10
 386:	e6 d4       	rcall	.+2508   	; 0xd54 <pinMode>
	pinMode(encoderPinD1, INPUT);
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	8a 89       	ldd	r24, Y+18	; 0x12
 38c:	e3 d4       	rcall	.+2502   	; 0xd54 <pinMode>
	pinMode(encoderPinD2, INPUT);
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	8c 89       	ldd	r24, Y+20	; 0x14
 392:	e0 d4       	rcall	.+2496   	; 0xd54 <pinMode>
	pinMode(encoderPinD3, INPUT);
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	8e 89       	ldd	r24, Y+22	; 0x16
 398:	dd d4       	rcall	.+2490   	; 0xd54 <pinMode>
	pinMode(encoderPinD4, INPUT);
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	88 8d       	ldd	r24, Y+24	; 0x18
 39e:	da d4       	rcall	.+2484   	; 0xd54 <pinMode>
	pinMode(encoderPinD5, INPUT);
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
 3a4:	d7 d4       	rcall	.+2478   	; 0xd54 <pinMode>
	pinMode(encoderPinD6, INPUT);
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3aa:	d4 d4       	rcall	.+2472   	; 0xd54 <pinMode>
	pinMode(encoderPinD7, INPUT);
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
 3b0:	d1 d4       	rcall	.+2466   	; 0xd54 <pinMode>

	pinMode(encoderPinEn1, OUTPUT);
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	88 85       	ldd	r24, Y+8	; 0x08
 3b6:	ce d4       	rcall	.+2460   	; 0xd54 <pinMode>
	pinMode(encoderPinEn2, OUTPUT);
 3b8:	61 e0       	ldi	r22, 0x01	; 1
 3ba:	8a 85       	ldd	r24, Y+10	; 0x0a
 3bc:	cb d4       	rcall	.+2454   	; 0xd54 <pinMode>

	digitalWrite(encoderPinEn1, HIGH);
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	88 85       	ldd	r24, Y+8	; 0x08
 3c2:	04 d5       	rcall	.+2568   	; 0xdcc <digitalWrite>
	digitalWrite(encoderPinEn2, LOW);
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	8a 85       	ldd	r24, Y+10	; 0x0a
 3c8:	01 d5       	rcall	.+2562   	; 0xdcc <digitalWrite>


	digitalWrite(encoderPinOE, HIGH);
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	8a 81       	ldd	r24, Y+2	; 0x02
 3ce:	fe d4       	rcall	.+2556   	; 0xdcc <digitalWrite>

	EncoderReset();
 3d0:	ce 01       	movw	r24, r28
}
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
	digitalWrite(encoderPinEn2, LOW);


	digitalWrite(encoderPinOE, HIGH);

	EncoderReset();
 3d6:	a6 cf       	rjmp	.-180    	; 0x324 <_ZNK8HCTL203212EncoderResetEv>

000003d8 <_ZNK8HCTL203211EncoderReadENS_13SelectChannelE>:
	delayMicroseconds(20);
	digitalWrite(encoderPinRSTY, HIGH);
}

int32_t HCTL2032::EncoderRead(SelectChannel EncoderChannel) const
{
 3d8:	cf 92       	push	r12
 3da:	df 92       	push	r13
 3dc:	ef 92       	push	r14
 3de:	ff 92       	push	r15
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	ec 01       	movw	r28, r24
	int32_t count;
	byte busByte;
	if (EncoderChannel == ChannelX)
 3e6:	61 11       	cpse	r22, r1
		digitalWrite(encoderPinXY, LOW);
		delayMicroseconds(20);
	}
	else
	{
		digitalWrite(encoderPinXY, HIGH);
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	88 81       	ld	r24, Y
 3ec:	ef d4       	rcall	.+2526   	; 0xdcc <digitalWrite>
		delayMicroseconds(20);
 3ee:	84 e1       	ldi	r24, 0x14	; 20
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	ee d3       	rcall	.+2012   	; 0xbd0 <delayMicroseconds>
	}

	
	digitalWrite(encoderPinOE, LOW);
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	8a 81       	ldd	r24, Y+2	; 0x02
 3f8:	e9 d4       	rcall	.+2514   	; 0xdcc <digitalWrite>

	digitalWrite(encoderPinSEL1, LOW);
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	8c 81       	ldd	r24, Y+4	; 0x04
 3fe:	e6 d4       	rcall	.+2508   	; 0xdcc <digitalWrite>
	digitalWrite(encoderPinSEL2, HIGH);
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	8e 81       	ldd	r24, Y+6	; 0x06
 404:	e3 d4       	rcall	.+2502   	; 0xdcc <digitalWrite>
	busByte = ReadByte();
 406:	ce 01       	movw	r24, r28
 408:	40 df       	rcall	.-384    	; 0x28a <_ZNK8HCTL20328ReadByteEv>
	count = busByte;
 40a:	c8 2e       	mov	r12, r24
 40c:	d1 2c       	mov	r13, r1
 40e:	e1 2c       	mov	r14, r1
 410:	f1 2c       	mov	r15, r1
	count <<= 8;
 412:	fe 2c       	mov	r15, r14
 414:	ed 2c       	mov	r14, r13
 416:	dc 2c       	mov	r13, r12
 418:	cc 24       	eor	r12, r12

	digitalWrite(encoderPinSEL1, HIGH);
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	8c 81       	ldd	r24, Y+4	; 0x04
 41e:	d6 d4       	rcall	.+2476   	; 0xdcc <digitalWrite>
	digitalWrite(encoderPinSEL2, HIGH);
 420:	61 e0       	ldi	r22, 0x01	; 1
 422:	8e 81       	ldd	r24, Y+6	; 0x06
 424:	d3 d4       	rcall	.+2470   	; 0xdcc <digitalWrite>
	busByte = ReadByte();
 426:	ce 01       	movw	r24, r28
 428:	30 df       	rcall	.-416    	; 0x28a <_ZNK8HCTL20328ReadByteEv>
	count += busByte;
 42a:	c8 0e       	add	r12, r24
 42c:	d1 1c       	adc	r13, r1
 42e:	e1 1c       	adc	r14, r1
 430:	f1 1c       	adc	r15, r1
	count <<= 8;
 432:	fe 2c       	mov	r15, r14
 434:	ed 2c       	mov	r14, r13
 436:	dc 2c       	mov	r13, r12
 438:	cc 24       	eor	r12, r12

	digitalWrite(encoderPinSEL1, LOW);
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	8c 81       	ldd	r24, Y+4	; 0x04
 43e:	c6 d4       	rcall	.+2444   	; 0xdcc <digitalWrite>
	digitalWrite(encoderPinSEL2, LOW);
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	8e 81       	ldd	r24, Y+6	; 0x06
 444:	c3 d4       	rcall	.+2438   	; 0xdcc <digitalWrite>
	busByte = ReadByte();
 446:	ce 01       	movw	r24, r28
 448:	20 df       	rcall	.-448    	; 0x28a <_ZNK8HCTL20328ReadByteEv>
	count += busByte;
 44a:	c8 0e       	add	r12, r24
 44c:	d1 1c       	adc	r13, r1
 44e:	e1 1c       	adc	r14, r1
 450:	f1 1c       	adc	r15, r1
	count <<= 8;
 452:	fe 2c       	mov	r15, r14
 454:	ed 2c       	mov	r14, r13
 456:	dc 2c       	mov	r13, r12
 458:	cc 24       	eor	r12, r12

	digitalWrite(encoderPinSEL1, HIGH);
 45a:	61 e0       	ldi	r22, 0x01	; 1
 45c:	8c 81       	ldd	r24, Y+4	; 0x04
 45e:	b6 d4       	rcall	.+2412   	; 0xdcc <digitalWrite>
	digitalWrite(encoderPinSEL2, LOW);
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	8e 81       	ldd	r24, Y+6	; 0x06
 464:	b3 d4       	rcall	.+2406   	; 0xdcc <digitalWrite>
	busByte = ReadByte();
 466:	ce 01       	movw	r24, r28
 468:	10 df       	rcall	.-480    	; 0x28a <_ZNK8HCTL20328ReadByteEv>
	count += busByte;
 46a:	c8 0e       	add	r12, r24
 46c:	d1 1c       	adc	r13, r1
 46e:	e1 1c       	adc	r14, r1
 470:	f1 1c       	adc	r15, r1


	digitalWrite(encoderPinOE, HIGH);
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	8a 81       	ldd	r24, Y+2	; 0x02
 476:	aa d4       	rcall	.+2388   	; 0xdcc <digitalWrite>

	return count;
}
 478:	c7 01       	movw	r24, r14
 47a:	b6 01       	movw	r22, r12
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	ff 90       	pop	r15
 482:	ef 90       	pop	r14
 484:	df 90       	pop	r13
 486:	cf 90       	pop	r12
 488:	08 95       	ret

0000048a <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 48a:	26 e0       	ldi	r18, 0x06	; 6
 48c:	40 e8       	ldi	r20, 0x80	; 128
 48e:	55 e2       	ldi	r21, 0x25	; 37
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	84 e4       	ldi	r24, 0x44	; 68
 496:	92 e0       	ldi	r25, 0x02	; 2
 498:	6a d1       	rcall	.+724    	; 0x76e <_ZN14HardwareSerial5beginEmh>

void setup()
{
  Serial.begin(9600);

  ReadEncoder.EncoderInit();
 49a:	84 e2       	ldi	r24, 0x24	; 36
 49c:	92 e0       	ldi	r25, 0x02	; 2
 49e:	5c cf       	rjmp	.-328    	; 0x358 <_ZNK8HCTL203211EncoderInitEv>

000004a0 <loop>:

}

void loop()
{
 4a0:	8f 92       	push	r8
 4a2:	9f 92       	push	r9
 4a4:	af 92       	push	r10
 4a6:	bf 92       	push	r11
 4a8:	cf 92       	push	r12
 4aa:	df 92       	push	r13
 4ac:	ef 92       	push	r14
 4ae:	ff 92       	push	r15

  int32_t Encoder1value=ReadEncoder.EncoderRead(HCTL2032::ChannelX);
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	84 e2       	ldi	r24, 0x24	; 36
 4b4:	92 e0       	ldi	r25, 0x02	; 2
 4b6:	90 df       	rcall	.-224    	; 0x3d8 <_ZNK8HCTL203211EncoderReadENS_13SelectChannelE>
 4b8:	4b 01       	movw	r8, r22
 4ba:	5c 01       	movw	r10, r24
  int32_t Encoder2value=ReadEncoder.EncoderRead(HCTL2032::ChannelY);
 4bc:	61 e0       	ldi	r22, 0x01	; 1
 4be:	84 e2       	ldi	r24, 0x24	; 36
 4c0:	92 e0       	ldi	r25, 0x02	; 2
 4c2:	8a df       	rcall	.-236    	; 0x3d8 <_ZNK8HCTL203211EncoderReadENS_13SelectChannelE>
 4c4:	6b 01       	movw	r12, r22
 4c6:	7c 01       	movw	r14, r24
  Serial.print(Encoder1value);
 4c8:	2a e0       	ldi	r18, 0x0A	; 10
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	b5 01       	movw	r22, r10
 4ce:	a4 01       	movw	r20, r8
 4d0:	84 e4       	ldi	r24, 0x44	; 68
 4d2:	92 e0       	ldi	r25, 0x02	; 2
 4d4:	ec d2       	rcall	.+1496   	; 0xaae <_ZN5Print5printEli>
  Serial.print("-");
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	72 e0       	ldi	r23, 0x02	; 2
 4da:	84 e4       	ldi	r24, 0x44	; 68
 4dc:	92 e0       	ldi	r25, 0x02	; 2
 4de:	8a d2       	rcall	.+1300   	; 0x9f4 <_ZN5Print5printEPKc>
  Serial.print(Encoder2value);
 4e0:	2a e0       	ldi	r18, 0x0A	; 10
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	b7 01       	movw	r22, r14
 4e6:	a6 01       	movw	r20, r12
 4e8:	84 e4       	ldi	r24, 0x44	; 68
 4ea:	92 e0       	ldi	r25, 0x02	; 2
 4ec:	e0 d2       	rcall	.+1472   	; 0xaae <_ZN5Print5printEli>
  Serial.println();
 4ee:	84 e4       	ldi	r24, 0x44	; 68
 4f0:	92 e0       	ldi	r25, 0x02	; 2

}
 4f2:	ff 90       	pop	r15
 4f4:	ef 90       	pop	r14
 4f6:	df 90       	pop	r13
 4f8:	cf 90       	pop	r12
 4fa:	bf 90       	pop	r11
 4fc:	af 90       	pop	r10
 4fe:	9f 90       	pop	r9
 500:	8f 90       	pop	r8
  int32_t Encoder1value=ReadEncoder.EncoderRead(HCTL2032::ChannelX);
  int32_t Encoder2value=ReadEncoder.EncoderRead(HCTL2032::ChannelY);
  Serial.print(Encoder1value);
  Serial.print("-");
  Serial.print(Encoder2value);
  Serial.println();
 502:	80 c2       	rjmp	.+1280   	; 0xa04 <_ZN5Print7printlnEv>

00000504 <_GLOBAL__sub_I_ReadEncoder>:
* Created: 11.05.2016 22:49:29
* Author: adgzlanl
*/
#include "arduino.h"

class HCTL2032
 504:	e4 e2       	ldi	r30, 0x24	; 36
 506:	f2 e0       	ldi	r31, 0x02	; 2
 508:	8f e1       	ldi	r24, 0x1F	; 31
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	91 83       	std	Z+1, r25	; 0x01
 50e:	80 83       	st	Z, r24
 510:	80 e2       	ldi	r24, 0x20	; 32
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	93 83       	std	Z+3, r25	; 0x03
 516:	82 83       	std	Z+2, r24	; 0x02
 518:	81 e2       	ldi	r24, 0x21	; 33
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	95 83       	std	Z+5, r25	; 0x05
 51e:	84 83       	std	Z+4, r24	; 0x04
 520:	82 e2       	ldi	r24, 0x22	; 34
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	97 83       	std	Z+7, r25	; 0x07
 526:	86 83       	std	Z+6, r24	; 0x06
 528:	83 e2       	ldi	r24, 0x23	; 35
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	91 87       	std	Z+9, r25	; 0x09
 52e:	80 87       	std	Z+8, r24	; 0x08
 530:	84 e2       	ldi	r24, 0x24	; 36
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	93 87       	std	Z+11, r25	; 0x0b
 536:	82 87       	std	Z+10, r24	; 0x0a
 538:	85 e2       	ldi	r24, 0x25	; 37
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	95 87       	std	Z+13, r25	; 0x0d
 53e:	84 87       	std	Z+12, r24	; 0x0c
 540:	86 e2       	ldi	r24, 0x26	; 38
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	97 87       	std	Z+15, r25	; 0x0f
 546:	86 87       	std	Z+14, r24	; 0x0e
 548:	86 e1       	ldi	r24, 0x16	; 22
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	91 8b       	std	Z+17, r25	; 0x11
 54e:	80 8b       	std	Z+16, r24	; 0x10
 550:	87 e1       	ldi	r24, 0x17	; 23
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	93 8b       	std	Z+19, r25	; 0x13
 556:	82 8b       	std	Z+18, r24	; 0x12
 558:	88 e1       	ldi	r24, 0x18	; 24
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	95 8b       	std	Z+21, r25	; 0x15
 55e:	84 8b       	std	Z+20, r24	; 0x14
 560:	89 e1       	ldi	r24, 0x19	; 25
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	97 8b       	std	Z+23, r25	; 0x17
 566:	86 8b       	std	Z+22, r24	; 0x16
 568:	8a e1       	ldi	r24, 0x1A	; 26
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	91 8f       	std	Z+25, r25	; 0x19
 56e:	80 8f       	std	Z+24, r24	; 0x18
 570:	8b e1       	ldi	r24, 0x1B	; 27
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	93 8f       	std	Z+27, r25	; 0x1b
 576:	82 8f       	std	Z+26, r24	; 0x1a
 578:	8c e1       	ldi	r24, 0x1C	; 28
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	95 8f       	std	Z+29, r25	; 0x1d
 57e:	84 8f       	std	Z+28, r24	; 0x1c
 580:	8d e1       	ldi	r24, 0x1D	; 29
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	97 8f       	std	Z+31, r25	; 0x1f
 586:	86 8f       	std	Z+30, r24	; 0x1e
 588:	08 95       	ret

0000058a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 58a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 58c:	91 8d       	ldd	r25, Z+25	; 0x19
 58e:	22 8d       	ldd	r18, Z+26	; 0x1a
 590:	89 2f       	mov	r24, r25
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	80 5c       	subi	r24, 0xC0	; 192
 596:	9f 4f       	sbci	r25, 0xFF	; 255
 598:	82 1b       	sub	r24, r18
 59a:	91 09       	sbc	r25, r1
}
 59c:	8f 73       	andi	r24, 0x3F	; 63
 59e:	99 27       	eor	r25, r25
 5a0:	08 95       	ret

000005a2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 5a2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 5a4:	91 8d       	ldd	r25, Z+25	; 0x19
 5a6:	82 8d       	ldd	r24, Z+26	; 0x1a
 5a8:	98 17       	cp	r25, r24
 5aa:	31 f0       	breq	.+12     	; 0x5b8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 5ac:	82 8d       	ldd	r24, Z+26	; 0x1a
 5ae:	e8 0f       	add	r30, r24
 5b0:	f1 1d       	adc	r31, r1
 5b2:	85 8d       	ldd	r24, Z+29	; 0x1d
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 5b8:	8f ef       	ldi	r24, 0xFF	; 255
 5ba:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 5bc:	08 95       	ret

000005be <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 5be:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 5c0:	91 8d       	ldd	r25, Z+25	; 0x19
 5c2:	82 8d       	ldd	r24, Z+26	; 0x1a
 5c4:	98 17       	cp	r25, r24
 5c6:	61 f0       	breq	.+24     	; 0x5e0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 5c8:	82 8d       	ldd	r24, Z+26	; 0x1a
 5ca:	df 01       	movw	r26, r30
 5cc:	a8 0f       	add	r26, r24
 5ce:	b1 1d       	adc	r27, r1
 5d0:	5d 96       	adiw	r26, 0x1d	; 29
 5d2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 5d4:	92 8d       	ldd	r25, Z+26	; 0x1a
 5d6:	9f 5f       	subi	r25, 0xFF	; 255
 5d8:	9f 73       	andi	r25, 0x3F	; 63
 5da:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 5e0:	8f ef       	ldi	r24, 0xFF	; 255
 5e2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 5e4:	08 95       	ret

000005e6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 5e6:	89 e7       	ldi	r24, 0x79	; 121
 5e8:	94 e0       	ldi	r25, 0x04	; 4
 5ea:	89 2b       	or	r24, r25
 5ec:	39 f0       	breq	.+14     	; 0x5fc <_Z14serialEventRunv+0x16>
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	89 2b       	or	r24, r25
 5f4:	19 f0       	breq	.+6      	; 0x5fc <_Z14serialEventRunv+0x16>
 5f6:	7d d1       	rcall	.+762    	; 0x8f2 <_Z17Serial0_availablev>
 5f8:	81 11       	cpse	r24, r1
 5fa:	25 c0       	rjmp	.+74     	; 0x646 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	89 2b       	or	r24, r25
 602:	41 f0       	breq	.+16     	; 0x614 <_Z14serialEventRunv+0x2e>
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	89 2b       	or	r24, r25
 60a:	21 f0       	breq	.+8      	; 0x614 <_Z14serialEventRunv+0x2e>
 60c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 610:	81 11       	cpse	r24, r1
 612:	1c c0       	rjmp	.+56     	; 0x64c <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	89 2b       	or	r24, r25
 61a:	41 f0       	breq	.+16     	; 0x62c <_Z14serialEventRunv+0x46>
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	89 2b       	or	r24, r25
 622:	21 f0       	breq	.+8      	; 0x62c <_Z14serialEventRunv+0x46>
 624:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 628:	81 11       	cpse	r24, r1
 62a:	13 c0       	rjmp	.+38     	; 0x652 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	89 2b       	or	r24, r25
 632:	a1 f0       	breq	.+40     	; 0x65c <_Z14serialEventRunv+0x76>
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	89 2b       	or	r24, r25
 63a:	81 f0       	breq	.+32     	; 0x65c <_Z14serialEventRunv+0x76>
 63c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 640:	81 11       	cpse	r24, r1
 642:	0a c0       	rjmp	.+20     	; 0x658 <_Z14serialEventRunv+0x72>
 644:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 646:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 64a:	d8 cf       	rjmp	.-80     	; 0x5fc <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 64c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 650:	e1 cf       	rjmp	.-62     	; 0x614 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 652:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 656:	ea cf       	rjmp	.-44     	; 0x62c <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 658:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 65c:	08 95       	ret

0000065e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 65e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 660:	84 8d       	ldd	r24, Z+28	; 0x1c
 662:	df 01       	movw	r26, r30
 664:	a8 0f       	add	r26, r24
 666:	b1 1d       	adc	r27, r1
 668:	a3 5a       	subi	r26, 0xA3	; 163
 66a:	bf 4f       	sbci	r27, 0xFF	; 255
 66c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 66e:	84 8d       	ldd	r24, Z+28	; 0x1c
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	01 96       	adiw	r24, 0x01	; 1
 674:	8f 73       	andi	r24, 0x3F	; 63
 676:	99 27       	eor	r25, r25
 678:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 67a:	a6 89       	ldd	r26, Z+22	; 0x16
 67c:	b7 89       	ldd	r27, Z+23	; 0x17
 67e:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 680:	a0 89       	ldd	r26, Z+16	; 0x10
 682:	b1 89       	ldd	r27, Z+17	; 0x11
 684:	8c 91       	ld	r24, X
 686:	80 64       	ori	r24, 0x40	; 64
 688:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 68a:	93 8d       	ldd	r25, Z+27	; 0x1b
 68c:	84 8d       	ldd	r24, Z+28	; 0x1c
 68e:	98 13       	cpse	r25, r24
 690:	06 c0       	rjmp	.+12     	; 0x69e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 692:	02 88       	ldd	r0, Z+18	; 0x12
 694:	f3 89       	ldd	r31, Z+19	; 0x13
 696:	e0 2d       	mov	r30, r0
 698:	80 81       	ld	r24, Z
 69a:	8f 7d       	andi	r24, 0xDF	; 223
 69c:	80 83       	st	Z, r24
 69e:	08 95       	ret

000006a0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 6a6:	88 8d       	ldd	r24, Y+24	; 0x18
 6a8:	88 23       	and	r24, r24
 6aa:	c1 f0       	breq	.+48     	; 0x6dc <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 6ac:	ea 89       	ldd	r30, Y+18	; 0x12
 6ae:	fb 89       	ldd	r31, Y+19	; 0x13
 6b0:	80 81       	ld	r24, Z
 6b2:	85 fd       	sbrc	r24, 5
 6b4:	05 c0       	rjmp	.+10     	; 0x6c0 <_ZN14HardwareSerial5flushEv+0x20>
 6b6:	a8 89       	ldd	r26, Y+16	; 0x10
 6b8:	b9 89       	ldd	r27, Y+17	; 0x11
 6ba:	8c 91       	ld	r24, X
 6bc:	86 fd       	sbrc	r24, 6
 6be:	0e c0       	rjmp	.+28     	; 0x6dc <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	07 fc       	sbrc	r0, 7
 6c4:	f5 cf       	rjmp	.-22     	; 0x6b0 <_ZN14HardwareSerial5flushEv+0x10>
 6c6:	80 81       	ld	r24, Z
 6c8:	85 ff       	sbrs	r24, 5
 6ca:	f2 cf       	rjmp	.-28     	; 0x6b0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 6cc:	a8 89       	ldd	r26, Y+16	; 0x10
 6ce:	b9 89       	ldd	r27, Y+17	; 0x11
 6d0:	8c 91       	ld	r24, X
 6d2:	85 ff       	sbrs	r24, 5
 6d4:	ed cf       	rjmp	.-38     	; 0x6b0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 6d6:	ce 01       	movw	r24, r28
 6d8:	c2 df       	rcall	.-124    	; 0x65e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 6da:	e8 cf       	rjmp	.-48     	; 0x6ac <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 6dc:	df 91       	pop	r29
 6de:	cf 91       	pop	r28
 6e0:	08 95       	ret

000006e2 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 6e2:	ef 92       	push	r14
 6e4:	ff 92       	push	r15
 6e6:	0f 93       	push	r16
 6e8:	1f 93       	push	r17
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
 6ee:	ec 01       	movw	r28, r24
  _written = true;
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 6f4:	9b 8d       	ldd	r25, Y+27	; 0x1b
 6f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
 6f8:	98 13       	cpse	r25, r24
 6fa:	05 c0       	rjmp	.+10     	; 0x706 <_ZN14HardwareSerial5writeEh+0x24>
 6fc:	e8 89       	ldd	r30, Y+16	; 0x10
 6fe:	f9 89       	ldd	r31, Y+17	; 0x11
 700:	80 81       	ld	r24, Z
 702:	85 fd       	sbrc	r24, 5
 704:	23 c0       	rjmp	.+70     	; 0x74c <_ZN14HardwareSerial5writeEh+0x6a>
 706:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 708:	0b 8d       	ldd	r16, Y+27	; 0x1b
 70a:	10 e0       	ldi	r17, 0x00	; 0
 70c:	0f 5f       	subi	r16, 0xFF	; 255
 70e:	1f 4f       	sbci	r17, 0xFF	; 255
 710:	0f 73       	andi	r16, 0x3F	; 63
 712:	11 27       	eor	r17, r17
 714:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 716:	8c 8d       	ldd	r24, Y+28	; 0x1c
 718:	e8 12       	cpse	r14, r24
 71a:	0b c0       	rjmp	.+22     	; 0x732 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	07 fc       	sbrc	r0, 7
 720:	fa cf       	rjmp	.-12     	; 0x716 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 722:	e8 89       	ldd	r30, Y+16	; 0x10
 724:	f9 89       	ldd	r31, Y+17	; 0x11
 726:	80 81       	ld	r24, Z
 728:	85 ff       	sbrs	r24, 5
 72a:	f5 cf       	rjmp	.-22     	; 0x716 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 72c:	ce 01       	movw	r24, r28
 72e:	97 df       	rcall	.-210    	; 0x65e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 730:	f2 cf       	rjmp	.-28     	; 0x716 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 732:	8b 8d       	ldd	r24, Y+27	; 0x1b
 734:	fe 01       	movw	r30, r28
 736:	e8 0f       	add	r30, r24
 738:	f1 1d       	adc	r31, r1
 73a:	e3 5a       	subi	r30, 0xA3	; 163
 73c:	ff 4f       	sbci	r31, 0xFF	; 255
 73e:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 740:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 742:	ea 89       	ldd	r30, Y+18	; 0x12
 744:	fb 89       	ldd	r31, Y+19	; 0x13
 746:	80 81       	ld	r24, Z
 748:	80 62       	ori	r24, 0x20	; 32
 74a:	07 c0       	rjmp	.+14     	; 0x75a <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 74c:	ee 89       	ldd	r30, Y+22	; 0x16
 74e:	ff 89       	ldd	r31, Y+23	; 0x17
 750:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 752:	e8 89       	ldd	r30, Y+16	; 0x10
 754:	f9 89       	ldd	r31, Y+17	; 0x11
 756:	80 81       	ld	r24, Z
 758:	80 64       	ori	r24, 0x40	; 64
 75a:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	1f 91       	pop	r17
 766:	0f 91       	pop	r16
 768:	ff 90       	pop	r15
 76a:	ef 90       	pop	r14
 76c:	08 95       	ret

0000076e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 76e:	cf 92       	push	r12
 770:	df 92       	push	r13
 772:	ef 92       	push	r14
 774:	ff 92       	push	r15
 776:	1f 93       	push	r17
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 77c:	ec 01       	movw	r28, r24
 77e:	6a 01       	movw	r12, r20
 780:	7b 01       	movw	r14, r22
 782:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 784:	e8 89       	ldd	r30, Y+16	; 0x10
 786:	f9 89       	ldd	r31, Y+17	; 0x11
 788:	82 e0       	ldi	r24, 0x02	; 2
 78a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 78c:	41 15       	cp	r20, r1
 78e:	51 4e       	sbci	r21, 0xE1	; 225
 790:	61 05       	cpc	r22, r1
 792:	71 05       	cpc	r23, r1
 794:	a9 f0       	breq	.+42     	; 0x7c0 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	79 e0       	ldi	r23, 0x09	; 9
 79a:	8d e3       	ldi	r24, 0x3D	; 61
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	a7 01       	movw	r20, r14
 7a0:	96 01       	movw	r18, r12
 7a2:	6b d3       	rcall	.+1750   	; 0xe7a <__udivmodsi4>
 7a4:	da 01       	movw	r26, r20
 7a6:	c9 01       	movw	r24, r18
 7a8:	01 97       	sbiw	r24, 0x01	; 1
 7aa:	a1 09       	sbc	r26, r1
 7ac:	b1 09       	sbc	r27, r1
 7ae:	b6 95       	lsr	r27
 7b0:	a7 95       	ror	r26
 7b2:	97 95       	ror	r25
 7b4:	87 95       	ror	r24
 7b6:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 7b8:	41 15       	cp	r20, r1
 7ba:	80 e1       	ldi	r24, 0x10	; 16
 7bc:	58 07       	cpc	r21, r24
 7be:	a0 f0       	brcs	.+40     	; 0x7e8 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
 7c0:	e8 89       	ldd	r30, Y+16	; 0x10
 7c2:	f9 89       	ldd	r31, Y+17	; 0x11
 7c4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 7c6:	60 e8       	ldi	r22, 0x80	; 128
 7c8:	74 e8       	ldi	r23, 0x84	; 132
 7ca:	8e e1       	ldi	r24, 0x1E	; 30
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	a7 01       	movw	r20, r14
 7d0:	96 01       	movw	r18, r12
 7d2:	53 d3       	rcall	.+1702   	; 0xe7a <__udivmodsi4>
 7d4:	ba 01       	movw	r22, r20
 7d6:	a9 01       	movw	r20, r18
 7d8:	41 50       	subi	r20, 0x01	; 1
 7da:	51 09       	sbc	r21, r1
 7dc:	61 09       	sbc	r22, r1
 7de:	71 09       	sbc	r23, r1
 7e0:	76 95       	lsr	r23
 7e2:	67 95       	ror	r22
 7e4:	57 95       	ror	r21
 7e6:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 7e8:	ec 85       	ldd	r30, Y+12	; 0x0c
 7ea:	fd 85       	ldd	r31, Y+13	; 0x0d
 7ec:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 7ee:	ee 85       	ldd	r30, Y+14	; 0x0e
 7f0:	ff 85       	ldd	r31, Y+15	; 0x0f
 7f2:	40 83       	st	Z, r20

  _written = false;
 7f4:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 7f6:	ec 89       	ldd	r30, Y+20	; 0x14
 7f8:	fd 89       	ldd	r31, Y+21	; 0x15
 7fa:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 7fc:	ea 89       	ldd	r30, Y+18	; 0x12
 7fe:	fb 89       	ldd	r31, Y+19	; 0x13
 800:	80 81       	ld	r24, Z
 802:	80 61       	ori	r24, 0x10	; 16
 804:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 806:	ea 89       	ldd	r30, Y+18	; 0x12
 808:	fb 89       	ldd	r31, Y+19	; 0x13
 80a:	80 81       	ld	r24, Z
 80c:	88 60       	ori	r24, 0x08	; 8
 80e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 810:	ea 89       	ldd	r30, Y+18	; 0x12
 812:	fb 89       	ldd	r31, Y+19	; 0x13
 814:	80 81       	ld	r24, Z
 816:	80 68       	ori	r24, 0x80	; 128
 818:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 81a:	ea 89       	ldd	r30, Y+18	; 0x12
 81c:	fb 89       	ldd	r31, Y+19	; 0x13
 81e:	80 81       	ld	r24, Z
 820:	8f 7d       	andi	r24, 0xDF	; 223
 822:	80 83       	st	Z, r24
}
 824:	df 91       	pop	r29
 826:	cf 91       	pop	r28
 828:	1f 91       	pop	r17
 82a:	ff 90       	pop	r15
 82c:	ef 90       	pop	r14
 82e:	df 90       	pop	r13
 830:	cf 90       	pop	r12
 832:	08 95       	ret

00000834 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 834:	1f 92       	push	r1
 836:	0f 92       	push	r0
 838:	0f b6       	in	r0, 0x3f	; 63
 83a:	0f 92       	push	r0
 83c:	11 24       	eor	r1, r1
 83e:	0b b6       	in	r0, 0x3b	; 59
 840:	0f 92       	push	r0
 842:	2f 93       	push	r18
 844:	8f 93       	push	r24
 846:	9f 93       	push	r25
 848:	ef 93       	push	r30
 84a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 84c:	e0 91 54 02 	lds	r30, 0x0254
 850:	f0 91 55 02 	lds	r31, 0x0255
 854:	80 81       	ld	r24, Z
 856:	e0 91 5a 02 	lds	r30, 0x025A
 85a:	f0 91 5b 02 	lds	r31, 0x025B
 85e:	82 fd       	sbrc	r24, 2
 860:	12 c0       	rjmp	.+36     	; 0x886 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 862:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 864:	80 91 5d 02 	lds	r24, 0x025D
 868:	8f 5f       	subi	r24, 0xFF	; 255
 86a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 86c:	20 91 5e 02 	lds	r18, 0x025E
 870:	82 17       	cp	r24, r18
 872:	51 f0       	breq	.+20     	; 0x888 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 874:	e0 91 5d 02 	lds	r30, 0x025D
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	ec 5b       	subi	r30, 0xBC	; 188
 87c:	fd 4f       	sbci	r31, 0xFD	; 253
 87e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 880:	80 93 5d 02 	sts	0x025D, r24
 884:	01 c0       	rjmp	.+2      	; 0x888 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 886:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 888:	ff 91       	pop	r31
 88a:	ef 91       	pop	r30
 88c:	9f 91       	pop	r25
 88e:	8f 91       	pop	r24
 890:	2f 91       	pop	r18
 892:	0f 90       	pop	r0
 894:	0b be       	out	0x3b, r0	; 59
 896:	0f 90       	pop	r0
 898:	0f be       	out	0x3f, r0	; 63
 89a:	0f 90       	pop	r0
 89c:	1f 90       	pop	r1
 89e:	18 95       	reti

000008a0 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 8a0:	1f 92       	push	r1
 8a2:	0f 92       	push	r0
 8a4:	0f b6       	in	r0, 0x3f	; 63
 8a6:	0f 92       	push	r0
 8a8:	11 24       	eor	r1, r1
 8aa:	0b b6       	in	r0, 0x3b	; 59
 8ac:	0f 92       	push	r0
 8ae:	2f 93       	push	r18
 8b0:	3f 93       	push	r19
 8b2:	4f 93       	push	r20
 8b4:	5f 93       	push	r21
 8b6:	6f 93       	push	r22
 8b8:	7f 93       	push	r23
 8ba:	8f 93       	push	r24
 8bc:	9f 93       	push	r25
 8be:	af 93       	push	r26
 8c0:	bf 93       	push	r27
 8c2:	ef 93       	push	r30
 8c4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 8c6:	84 e4       	ldi	r24, 0x44	; 68
 8c8:	92 e0       	ldi	r25, 0x02	; 2
 8ca:	c9 de       	rcall	.-622    	; 0x65e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 8cc:	ff 91       	pop	r31
 8ce:	ef 91       	pop	r30
 8d0:	bf 91       	pop	r27
 8d2:	af 91       	pop	r26
 8d4:	9f 91       	pop	r25
 8d6:	8f 91       	pop	r24
 8d8:	7f 91       	pop	r23
 8da:	6f 91       	pop	r22
 8dc:	5f 91       	pop	r21
 8de:	4f 91       	pop	r20
 8e0:	3f 91       	pop	r19
 8e2:	2f 91       	pop	r18
 8e4:	0f 90       	pop	r0
 8e6:	0b be       	out	0x3b, r0	; 59
 8e8:	0f 90       	pop	r0
 8ea:	0f be       	out	0x3f, r0	; 63
 8ec:	0f 90       	pop	r0
 8ee:	1f 90       	pop	r1
 8f0:	18 95       	reti

000008f2 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 8f2:	84 e4       	ldi	r24, 0x44	; 68
 8f4:	92 e0       	ldi	r25, 0x02	; 2
 8f6:	49 de       	rcall	.-878    	; 0x58a <_ZN14HardwareSerial9availableEv>
 8f8:	21 e0       	ldi	r18, 0x01	; 1
 8fa:	89 2b       	or	r24, r25
 8fc:	09 f4       	brne	.+2      	; 0x900 <_Z17Serial0_availablev+0xe>
 8fe:	20 e0       	ldi	r18, 0x00	; 0
}
 900:	82 2f       	mov	r24, r18
 902:	08 95       	ret

00000904 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 904:	e4 e4       	ldi	r30, 0x44	; 68
 906:	f2 e0       	ldi	r31, 0x02	; 2
 908:	13 82       	std	Z+3, r1	; 0x03
 90a:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 90c:	88 ee       	ldi	r24, 0xE8	; 232
 90e:	93 e0       	ldi	r25, 0x03	; 3
 910:	a0 e0       	ldi	r26, 0x00	; 0
 912:	b0 e0       	ldi	r27, 0x00	; 0
 914:	84 83       	std	Z+4, r24	; 0x04
 916:	95 83       	std	Z+5, r25	; 0x05
 918:	a6 83       	std	Z+6, r26	; 0x06
 91a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 91c:	86 e0       	ldi	r24, 0x06	; 6
 91e:	92 e0       	ldi	r25, 0x02	; 2
 920:	91 83       	std	Z+1, r25	; 0x01
 922:	80 83       	st	Z, r24
 924:	85 ec       	ldi	r24, 0xC5	; 197
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	95 87       	std	Z+13, r25	; 0x0d
 92a:	84 87       	std	Z+12, r24	; 0x0c
 92c:	84 ec       	ldi	r24, 0xC4	; 196
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	97 87       	std	Z+15, r25	; 0x0f
 932:	86 87       	std	Z+14, r24	; 0x0e
 934:	80 ec       	ldi	r24, 0xC0	; 192
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	91 8b       	std	Z+17, r25	; 0x11
 93a:	80 8b       	std	Z+16, r24	; 0x10
 93c:	81 ec       	ldi	r24, 0xC1	; 193
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	93 8b       	std	Z+19, r25	; 0x13
 942:	82 8b       	std	Z+18, r24	; 0x12
 944:	82 ec       	ldi	r24, 0xC2	; 194
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	95 8b       	std	Z+21, r25	; 0x15
 94a:	84 8b       	std	Z+20, r24	; 0x14
 94c:	86 ec       	ldi	r24, 0xC6	; 198
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	97 8b       	std	Z+23, r25	; 0x17
 952:	86 8b       	std	Z+22, r24	; 0x16
 954:	11 8e       	std	Z+25, r1	; 0x19
 956:	12 8e       	std	Z+26, r1	; 0x1a
 958:	13 8e       	std	Z+27, r1	; 0x1b
 95a:	14 8e       	std	Z+28, r1	; 0x1c
 95c:	08 95       	ret

0000095e <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 95e:	08 95       	ret

00000960 <main>:

int main(void)
{
	init();
 960:	42 d1       	rcall	.+644    	; 0xbe6 <init>

	initVariant();
 962:	fd df       	rcall	.-6      	; 0x95e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 964:	92 dd       	rcall	.-1244   	; 0x48a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 966:	c3 ef       	ldi	r28, 0xF3	; 243
 968:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
 96a:	9a dd       	rcall	.-1228   	; 0x4a0 <loop>
		if (serialEventRun) serialEventRun();
 96c:	20 97       	sbiw	r28, 0x00	; 0
 96e:	e9 f3       	breq	.-6      	; 0x96a <main+0xa>
 970:	3a de       	rcall	.-908    	; 0x5e6 <_Z14serialEventRunv>
 972:	fb cf       	rjmp	.-10     	; 0x96a <main+0xa>

00000974 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
 974:	cf 92       	push	r12
 976:	df 92       	push	r13
 978:	ef 92       	push	r14
 97a:	ff 92       	push	r15
 97c:	0f 93       	push	r16
 97e:	1f 93       	push	r17
 980:	cf 93       	push	r28
 982:	df 93       	push	r29
 984:	6c 01       	movw	r12, r24
 986:	7a 01       	movw	r14, r20
 988:	8b 01       	movw	r16, r22
 98a:	c0 e0       	ldi	r28, 0x00	; 0
 98c:	d0 e0       	ldi	r29, 0x00	; 0
 98e:	ce 15       	cp	r28, r14
 990:	df 05       	cpc	r29, r15
 992:	89 f0       	breq	.+34     	; 0x9b6 <_ZN5Print5writeEPKhj+0x42>
 994:	d8 01       	movw	r26, r16
 996:	6d 91       	ld	r22, X+
 998:	8d 01       	movw	r16, r26
 99a:	d6 01       	movw	r26, r12
 99c:	ed 91       	ld	r30, X+
 99e:	fc 91       	ld	r31, X
 9a0:	01 90       	ld	r0, Z+
 9a2:	f0 81       	ld	r31, Z
 9a4:	e0 2d       	mov	r30, r0
 9a6:	c6 01       	movw	r24, r12
 9a8:	19 95       	eicall
 9aa:	89 2b       	or	r24, r25
 9ac:	11 f4       	brne	.+4      	; 0x9b2 <_ZN5Print5writeEPKhj+0x3e>
 9ae:	7e 01       	movw	r14, r28
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <_ZN5Print5writeEPKhj+0x42>
 9b2:	21 96       	adiw	r28, 0x01	; 1
 9b4:	ec cf       	rjmp	.-40     	; 0x98e <_ZN5Print5writeEPKhj+0x1a>
 9b6:	c7 01       	movw	r24, r14
 9b8:	df 91       	pop	r29
 9ba:	cf 91       	pop	r28
 9bc:	1f 91       	pop	r17
 9be:	0f 91       	pop	r16
 9c0:	ff 90       	pop	r15
 9c2:	ef 90       	pop	r14
 9c4:	df 90       	pop	r13
 9c6:	cf 90       	pop	r12
 9c8:	08 95       	ret

000009ca <_ZN5Print5writeEPKc>:
 9ca:	61 15       	cp	r22, r1
 9cc:	71 05       	cpc	r23, r1
 9ce:	79 f0       	breq	.+30     	; 0x9ee <_ZN5Print5writeEPKc+0x24>
 9d0:	fb 01       	movw	r30, r22
 9d2:	01 90       	ld	r0, Z+
 9d4:	00 20       	and	r0, r0
 9d6:	e9 f7       	brne	.-6      	; 0x9d2 <_ZN5Print5writeEPKc+0x8>
 9d8:	31 97       	sbiw	r30, 0x01	; 1
 9da:	af 01       	movw	r20, r30
 9dc:	46 1b       	sub	r20, r22
 9de:	57 0b       	sbc	r21, r23
 9e0:	dc 01       	movw	r26, r24
 9e2:	ed 91       	ld	r30, X+
 9e4:	fc 91       	ld	r31, X
 9e6:	02 80       	ldd	r0, Z+2	; 0x02
 9e8:	f3 81       	ldd	r31, Z+3	; 0x03
 9ea:	e0 2d       	mov	r30, r0
 9ec:	19 94       	eijmp
 9ee:	80 e0       	ldi	r24, 0x00	; 0
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	08 95       	ret

000009f4 <_ZN5Print5printEPKc>:
 9f4:	ea cf       	rjmp	.-44     	; 0x9ca <_ZN5Print5writeEPKc>

000009f6 <_ZN5Print5printEc>:
 9f6:	dc 01       	movw	r26, r24
 9f8:	ed 91       	ld	r30, X+
 9fa:	fc 91       	ld	r31, X
 9fc:	01 90       	ld	r0, Z+
 9fe:	f0 81       	ld	r31, Z
 a00:	e0 2d       	mov	r30, r0
 a02:	19 94       	eijmp

00000a04 <_ZN5Print7printlnEv>:
 a04:	62 e1       	ldi	r22, 0x12	; 18
 a06:	72 e0       	ldi	r23, 0x02	; 2
 a08:	e0 cf       	rjmp	.-64     	; 0x9ca <_ZN5Print5writeEPKc>

00000a0a <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
 a0a:	8f 92       	push	r8
 a0c:	9f 92       	push	r9
 a0e:	af 92       	push	r10
 a10:	bf 92       	push	r11
 a12:	cf 92       	push	r12
 a14:	df 92       	push	r13
 a16:	ef 92       	push	r14
 a18:	ff 92       	push	r15
 a1a:	0f 93       	push	r16
 a1c:	1f 93       	push	r17
 a1e:	cf 93       	push	r28
 a20:	df 93       	push	r29
 a22:	cd b7       	in	r28, 0x3d	; 61
 a24:	de b7       	in	r29, 0x3e	; 62
 a26:	a1 97       	sbiw	r28, 0x21	; 33
 a28:	0f b6       	in	r0, 0x3f	; 63
 a2a:	f8 94       	cli
 a2c:	de bf       	out	0x3e, r29	; 62
 a2e:	0f be       	out	0x3f, r0	; 63
 a30:	cd bf       	out	0x3d, r28	; 61
 a32:	7c 01       	movw	r14, r24
 a34:	d4 2e       	mov	r13, r20
 a36:	c5 2e       	mov	r12, r21
 a38:	db 01       	movw	r26, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 a3a:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 a3c:	22 30       	cpi	r18, 0x02	; 2
 a3e:	08 f4       	brcc	.+2      	; 0xa42 <_ZN5Print11printNumberEmh+0x38>
 a40:	2a e0       	ldi	r18, 0x0A	; 10
 a42:	8e 01       	movw	r16, r28
 a44:	0f 5d       	subi	r16, 0xDF	; 223
 a46:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
 a48:	82 2e       	mov	r8, r18
 a4a:	91 2c       	mov	r9, r1
 a4c:	a1 2c       	mov	r10, r1
 a4e:	b1 2c       	mov	r11, r1
 a50:	6d 2d       	mov	r22, r13
 a52:	7c 2d       	mov	r23, r12
 a54:	cd 01       	movw	r24, r26
 a56:	a5 01       	movw	r20, r10
 a58:	94 01       	movw	r18, r8
 a5a:	0f d2       	rcall	.+1054   	; 0xe7a <__udivmodsi4>
    n /= base;
 a5c:	d2 2e       	mov	r13, r18
 a5e:	c3 2e       	mov	r12, r19
 a60:	da 01       	movw	r26, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 a62:	01 50       	subi	r16, 0x01	; 1
 a64:	11 09       	sbc	r17, r1
 a66:	6a 30       	cpi	r22, 0x0A	; 10
 a68:	71 05       	cpc	r23, r1
 a6a:	81 05       	cpc	r24, r1
 a6c:	91 05       	cpc	r25, r1
 a6e:	10 f4       	brcc	.+4      	; 0xa74 <_ZN5Print11printNumberEmh+0x6a>
 a70:	60 5d       	subi	r22, 0xD0	; 208
 a72:	01 c0       	rjmp	.+2      	; 0xa76 <_ZN5Print11printNumberEmh+0x6c>
 a74:	69 5c       	subi	r22, 0xC9	; 201
 a76:	f8 01       	movw	r30, r16
 a78:	60 83       	st	Z, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 a7a:	23 2b       	or	r18, r19
 a7c:	24 2b       	or	r18, r20
 a7e:	25 2b       	or	r18, r21
 a80:	39 f7       	brne	.-50     	; 0xa50 <_ZN5Print11printNumberEmh+0x46>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 a82:	b8 01       	movw	r22, r16
 a84:	c7 01       	movw	r24, r14
 a86:	a1 df       	rcall	.-190    	; 0x9ca <_ZN5Print5writeEPKc>
}
 a88:	a1 96       	adiw	r28, 0x21	; 33
 a8a:	0f b6       	in	r0, 0x3f	; 63
 a8c:	f8 94       	cli
 a8e:	de bf       	out	0x3e, r29	; 62
 a90:	0f be       	out	0x3f, r0	; 63
 a92:	cd bf       	out	0x3d, r28	; 61
 a94:	df 91       	pop	r29
 a96:	cf 91       	pop	r28
 a98:	1f 91       	pop	r17
 a9a:	0f 91       	pop	r16
 a9c:	ff 90       	pop	r15
 a9e:	ef 90       	pop	r14
 aa0:	df 90       	pop	r13
 aa2:	cf 90       	pop	r12
 aa4:	bf 90       	pop	r11
 aa6:	af 90       	pop	r10
 aa8:	9f 90       	pop	r9
 aaa:	8f 90       	pop	r8
 aac:	08 95       	ret

00000aae <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 aae:	cf 92       	push	r12
 ab0:	df 92       	push	r13
 ab2:	ef 92       	push	r14
 ab4:	ff 92       	push	r15
 ab6:	0f 93       	push	r16
 ab8:	1f 93       	push	r17
 aba:	cf 93       	push	r28
 abc:	df 93       	push	r29
 abe:	ec 01       	movw	r28, r24
 ac0:	6a 01       	movw	r12, r20
 ac2:	7b 01       	movw	r14, r22
  if (base == 0) {
 ac4:	21 15       	cp	r18, r1
 ac6:	31 05       	cpc	r19, r1
 ac8:	79 f4       	brne	.+30     	; 0xae8 <_ZN5Print5printEli+0x3a>
    return write(n);
 aca:	e8 81       	ld	r30, Y
 acc:	f9 81       	ldd	r31, Y+1	; 0x01
 ace:	01 90       	ld	r0, Z+
 ad0:	f0 81       	ld	r31, Z
 ad2:	e0 2d       	mov	r30, r0
 ad4:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 ad6:	df 91       	pop	r29
 ad8:	cf 91       	pop	r28
 ada:	1f 91       	pop	r17
 adc:	0f 91       	pop	r16
 ade:	ff 90       	pop	r15
 ae0:	ef 90       	pop	r14
 ae2:	df 90       	pop	r13
 ae4:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 ae6:	19 94       	eijmp
  } else if (base == 10) {
 ae8:	2a 30       	cpi	r18, 0x0A	; 10
 aea:	31 05       	cpc	r19, r1
 aec:	d9 f4       	brne	.+54     	; 0xb24 <_ZN5Print5printEli+0x76>
    if (n < 0) {
 aee:	77 ff       	sbrs	r23, 7
 af0:	18 c0       	rjmp	.+48     	; 0xb22 <_ZN5Print5printEli+0x74>
      int t = print('-');
 af2:	6d e2       	ldi	r22, 0x2D	; 45
 af4:	80 df       	rcall	.-256    	; 0x9f6 <_ZN5Print5printEc>
 af6:	8c 01       	movw	r16, r24
      n = -n;
 af8:	44 27       	eor	r20, r20
 afa:	55 27       	eor	r21, r21
 afc:	ba 01       	movw	r22, r20
 afe:	4c 19       	sub	r20, r12
 b00:	5d 09       	sbc	r21, r13
 b02:	6e 09       	sbc	r22, r14
 b04:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
 b06:	2a e0       	ldi	r18, 0x0A	; 10
 b08:	ce 01       	movw	r24, r28
 b0a:	7f df       	rcall	.-258    	; 0xa0a <_ZN5Print11printNumberEmh>
 b0c:	80 0f       	add	r24, r16
 b0e:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 b10:	df 91       	pop	r29
 b12:	cf 91       	pop	r28
 b14:	1f 91       	pop	r17
 b16:	0f 91       	pop	r16
 b18:	ff 90       	pop	r15
 b1a:	ef 90       	pop	r14
 b1c:	df 90       	pop	r13
 b1e:	cf 90       	pop	r12
 b20:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 b22:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
 b24:	b7 01       	movw	r22, r14
 b26:	a6 01       	movw	r20, r12
 b28:	ce 01       	movw	r24, r28
  }
}
 b2a:	df 91       	pop	r29
 b2c:	cf 91       	pop	r28
 b2e:	1f 91       	pop	r17
 b30:	0f 91       	pop	r16
 b32:	ff 90       	pop	r15
 b34:	ef 90       	pop	r14
 b36:	df 90       	pop	r13
 b38:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 b3a:	67 cf       	rjmp	.-306    	; 0xa0a <_ZN5Print11printNumberEmh>

00000b3c <__vector_23>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 b3c:	1f 92       	push	r1
 b3e:	0f 92       	push	r0
 b40:	0f b6       	in	r0, 0x3f	; 63
 b42:	0f 92       	push	r0
 b44:	11 24       	eor	r1, r1
 b46:	2f 93       	push	r18
 b48:	3f 93       	push	r19
 b4a:	8f 93       	push	r24
 b4c:	9f 93       	push	r25
 b4e:	af 93       	push	r26
 b50:	bf 93       	push	r27
 b52:	80 91 e2 02 	lds	r24, 0x02E2
 b56:	90 91 e3 02 	lds	r25, 0x02E3
 b5a:	a0 91 e4 02 	lds	r26, 0x02E4
 b5e:	b0 91 e5 02 	lds	r27, 0x02E5
 b62:	30 91 e1 02 	lds	r19, 0x02E1
 b66:	23 e0       	ldi	r18, 0x03	; 3
 b68:	23 0f       	add	r18, r19
 b6a:	2d 37       	cpi	r18, 0x7D	; 125
 b6c:	20 f4       	brcc	.+8      	; 0xb76 <__vector_23+0x3a>
 b6e:	01 96       	adiw	r24, 0x01	; 1
 b70:	a1 1d       	adc	r26, r1
 b72:	b1 1d       	adc	r27, r1
 b74:	05 c0       	rjmp	.+10     	; 0xb80 <__vector_23+0x44>
 b76:	26 e8       	ldi	r18, 0x86	; 134
 b78:	23 0f       	add	r18, r19
 b7a:	02 96       	adiw	r24, 0x02	; 2
 b7c:	a1 1d       	adc	r26, r1
 b7e:	b1 1d       	adc	r27, r1
 b80:	20 93 e1 02 	sts	0x02E1, r18
 b84:	80 93 e2 02 	sts	0x02E2, r24
 b88:	90 93 e3 02 	sts	0x02E3, r25
 b8c:	a0 93 e4 02 	sts	0x02E4, r26
 b90:	b0 93 e5 02 	sts	0x02E5, r27
 b94:	80 91 e6 02 	lds	r24, 0x02E6
 b98:	90 91 e7 02 	lds	r25, 0x02E7
 b9c:	a0 91 e8 02 	lds	r26, 0x02E8
 ba0:	b0 91 e9 02 	lds	r27, 0x02E9
 ba4:	01 96       	adiw	r24, 0x01	; 1
 ba6:	a1 1d       	adc	r26, r1
 ba8:	b1 1d       	adc	r27, r1
 baa:	80 93 e6 02 	sts	0x02E6, r24
 bae:	90 93 e7 02 	sts	0x02E7, r25
 bb2:	a0 93 e8 02 	sts	0x02E8, r26
 bb6:	b0 93 e9 02 	sts	0x02E9, r27
 bba:	bf 91       	pop	r27
 bbc:	af 91       	pop	r26
 bbe:	9f 91       	pop	r25
 bc0:	8f 91       	pop	r24
 bc2:	3f 91       	pop	r19
 bc4:	2f 91       	pop	r18
 bc6:	0f 90       	pop	r0
 bc8:	0f be       	out	0x3f, r0	; 63
 bca:	0f 90       	pop	r0
 bcc:	1f 90       	pop	r1
 bce:	18 95       	reti

00000bd0 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
 bd0:	82 30       	cpi	r24, 0x02	; 2
 bd2:	91 05       	cpc	r25, r1
 bd4:	38 f0       	brcs	.+14     	; 0xbe4 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
 bd6:	88 0f       	add	r24, r24
 bd8:	99 1f       	adc	r25, r25
 bda:	88 0f       	add	r24, r24
 bdc:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
 bde:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
 be0:	01 97       	sbiw	r24, 0x01	; 1
 be2:	f1 f7       	brne	.-4      	; 0xbe0 <delayMicroseconds+0x10>
 be4:	08 95       	ret

00000be6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 be6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 be8:	84 b5       	in	r24, 0x24	; 36
 bea:	82 60       	ori	r24, 0x02	; 2
 bec:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 bee:	84 b5       	in	r24, 0x24	; 36
 bf0:	81 60       	ori	r24, 0x01	; 1
 bf2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 bf4:	85 b5       	in	r24, 0x25	; 37
 bf6:	82 60       	ori	r24, 0x02	; 2
 bf8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 bfa:	85 b5       	in	r24, 0x25	; 37
 bfc:	81 60       	ori	r24, 0x01	; 1
 bfe:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 c00:	ee e6       	ldi	r30, 0x6E	; 110
 c02:	f0 e0       	ldi	r31, 0x00	; 0
 c04:	80 81       	ld	r24, Z
 c06:	81 60       	ori	r24, 0x01	; 1
 c08:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 c0a:	e1 e8       	ldi	r30, 0x81	; 129
 c0c:	f0 e0       	ldi	r31, 0x00	; 0
 c0e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 c10:	80 81       	ld	r24, Z
 c12:	82 60       	ori	r24, 0x02	; 2
 c14:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 c16:	80 81       	ld	r24, Z
 c18:	81 60       	ori	r24, 0x01	; 1
 c1a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 c1c:	e0 e8       	ldi	r30, 0x80	; 128
 c1e:	f0 e0       	ldi	r31, 0x00	; 0
 c20:	80 81       	ld	r24, Z
 c22:	81 60       	ori	r24, 0x01	; 1
 c24:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 c26:	e1 eb       	ldi	r30, 0xB1	; 177
 c28:	f0 e0       	ldi	r31, 0x00	; 0
 c2a:	80 81       	ld	r24, Z
 c2c:	84 60       	ori	r24, 0x04	; 4
 c2e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 c30:	e0 eb       	ldi	r30, 0xB0	; 176
 c32:	f0 e0       	ldi	r31, 0x00	; 0
 c34:	80 81       	ld	r24, Z
 c36:	81 60       	ori	r24, 0x01	; 1
 c38:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 c3a:	e1 e9       	ldi	r30, 0x91	; 145
 c3c:	f0 e0       	ldi	r31, 0x00	; 0
 c3e:	80 81       	ld	r24, Z
 c40:	82 60       	ori	r24, 0x02	; 2
 c42:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 c44:	80 81       	ld	r24, Z
 c46:	81 60       	ori	r24, 0x01	; 1
 c48:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 c4a:	e0 e9       	ldi	r30, 0x90	; 144
 c4c:	f0 e0       	ldi	r31, 0x00	; 0
 c4e:	80 81       	ld	r24, Z
 c50:	81 60       	ori	r24, 0x01	; 1
 c52:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 c54:	e1 ea       	ldi	r30, 0xA1	; 161
 c56:	f0 e0       	ldi	r31, 0x00	; 0
 c58:	80 81       	ld	r24, Z
 c5a:	82 60       	ori	r24, 0x02	; 2
 c5c:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 c5e:	80 81       	ld	r24, Z
 c60:	81 60       	ori	r24, 0x01	; 1
 c62:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 c64:	e0 ea       	ldi	r30, 0xA0	; 160
 c66:	f0 e0       	ldi	r31, 0x00	; 0
 c68:	80 81       	ld	r24, Z
 c6a:	81 60       	ori	r24, 0x01	; 1
 c6c:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 c6e:	e1 e2       	ldi	r30, 0x21	; 33
 c70:	f1 e0       	ldi	r31, 0x01	; 1
 c72:	80 81       	ld	r24, Z
 c74:	82 60       	ori	r24, 0x02	; 2
 c76:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 c78:	80 81       	ld	r24, Z
 c7a:	81 60       	ori	r24, 0x01	; 1
 c7c:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 c7e:	e0 e2       	ldi	r30, 0x20	; 32
 c80:	f1 e0       	ldi	r31, 0x01	; 1
 c82:	80 81       	ld	r24, Z
 c84:	81 60       	ori	r24, 0x01	; 1
 c86:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 c88:	ea e7       	ldi	r30, 0x7A	; 122
 c8a:	f0 e0       	ldi	r31, 0x00	; 0
 c8c:	80 81       	ld	r24, Z
 c8e:	84 60       	ori	r24, 0x04	; 4
 c90:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 c92:	80 81       	ld	r24, Z
 c94:	82 60       	ori	r24, 0x02	; 2
 c96:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 c98:	80 81       	ld	r24, Z
 c9a:	81 60       	ori	r24, 0x01	; 1
 c9c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 c9e:	80 81       	ld	r24, Z
 ca0:	80 68       	ori	r24, 0x80	; 128
 ca2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 ca4:	10 92 c1 00 	sts	0x00C1, r1
 ca8:	08 95       	ret

00000caa <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 caa:	90 e0       	ldi	r25, 0x00	; 0
 cac:	fc 01       	movw	r30, r24
 cae:	31 97       	sbiw	r30, 0x01	; 1
 cb0:	e2 31       	cpi	r30, 0x12	; 18
 cb2:	f1 05       	cpc	r31, r1
 cb4:	08 f0       	brcs	.+2      	; 0xcb8 <turnOffPWM+0xe>
 cb6:	4d c0       	rjmp	.+154    	; 0xd52 <turnOffPWM+0xa8>
 cb8:	88 27       	eor	r24, r24
 cba:	ee 58       	subi	r30, 0x8E	; 142
 cbc:	ff 4f       	sbci	r31, 0xFF	; 255
 cbe:	8f 4f       	sbci	r24, 0xFF	; 255
 cc0:	fe c0       	rjmp	.+508    	; 0xebe <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 cc2:	80 91 80 00 	lds	r24, 0x0080
 cc6:	8f 77       	andi	r24, 0x7F	; 127
 cc8:	03 c0       	rjmp	.+6      	; 0xcd0 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 cca:	80 91 80 00 	lds	r24, 0x0080
 cce:	8f 7d       	andi	r24, 0xDF	; 223
 cd0:	80 93 80 00 	sts	0x0080, r24
 cd4:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
 cd6:	80 91 80 00 	lds	r24, 0x0080
 cda:	87 7f       	andi	r24, 0xF7	; 247
 cdc:	f9 cf       	rjmp	.-14     	; 0xcd0 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 cde:	84 b5       	in	r24, 0x24	; 36
 ce0:	8f 77       	andi	r24, 0x7F	; 127
 ce2:	02 c0       	rjmp	.+4      	; 0xce8 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 ce4:	84 b5       	in	r24, 0x24	; 36
 ce6:	8f 7d       	andi	r24, 0xDF	; 223
 ce8:	84 bd       	out	0x24, r24	; 36
 cea:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 cec:	80 91 b0 00 	lds	r24, 0x00B0
 cf0:	8f 77       	andi	r24, 0x7F	; 127
 cf2:	03 c0       	rjmp	.+6      	; 0xcfa <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 cf4:	80 91 b0 00 	lds	r24, 0x00B0
 cf8:	8f 7d       	andi	r24, 0xDF	; 223
 cfa:	80 93 b0 00 	sts	0x00B0, r24
 cfe:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 d00:	80 91 90 00 	lds	r24, 0x0090
 d04:	8f 77       	andi	r24, 0x7F	; 127
 d06:	07 c0       	rjmp	.+14     	; 0xd16 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 d08:	80 91 90 00 	lds	r24, 0x0090
 d0c:	8f 7d       	andi	r24, 0xDF	; 223
 d0e:	03 c0       	rjmp	.+6      	; 0xd16 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
 d10:	80 91 90 00 	lds	r24, 0x0090
 d14:	87 7f       	andi	r24, 0xF7	; 247
 d16:	80 93 90 00 	sts	0x0090, r24
 d1a:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
 d1c:	80 91 a0 00 	lds	r24, 0x00A0
 d20:	8f 77       	andi	r24, 0x7F	; 127
 d22:	07 c0       	rjmp	.+14     	; 0xd32 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
 d24:	80 91 a0 00 	lds	r24, 0x00A0
 d28:	8f 7d       	andi	r24, 0xDF	; 223
 d2a:	03 c0       	rjmp	.+6      	; 0xd32 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
 d2c:	80 91 a0 00 	lds	r24, 0x00A0
 d30:	87 7f       	andi	r24, 0xF7	; 247
 d32:	80 93 a0 00 	sts	0x00A0, r24
 d36:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
 d38:	80 91 20 01 	lds	r24, 0x0120
 d3c:	8f 77       	andi	r24, 0x7F	; 127
 d3e:	07 c0       	rjmp	.+14     	; 0xd4e <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
 d40:	80 91 20 01 	lds	r24, 0x0120
 d44:	8f 7d       	andi	r24, 0xDF	; 223
 d46:	03 c0       	rjmp	.+6      	; 0xd4e <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
 d48:	80 91 20 01 	lds	r24, 0x0120
 d4c:	87 7f       	andi	r24, 0xF7	; 247
 d4e:	80 93 20 01 	sts	0x0120, r24
 d52:	08 95       	ret

00000d54 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 d54:	cf 93       	push	r28
 d56:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 d58:	90 e0       	ldi	r25, 0x00	; 0
 d5a:	fc 01       	movw	r30, r24
 d5c:	e2 5b       	subi	r30, 0xB2	; 178
 d5e:	fe 4f       	sbci	r31, 0xFE	; 254
 d60:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 d62:	fc 01       	movw	r30, r24
 d64:	ec 56       	subi	r30, 0x6C	; 108
 d66:	fe 4f       	sbci	r31, 0xFE	; 254
 d68:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 d6a:	88 23       	and	r24, r24
 d6c:	61 f1       	breq	.+88     	; 0xdc6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 d6e:	90 e0       	ldi	r25, 0x00	; 0
 d70:	88 0f       	add	r24, r24
 d72:	99 1f       	adc	r25, r25
 d74:	fc 01       	movw	r30, r24
 d76:	e2 5f       	subi	r30, 0xF2	; 242
 d78:	fd 4f       	sbci	r31, 0xFD	; 253
 d7a:	c5 91       	lpm	r28, Z+
 d7c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 d7e:	fc 01       	movw	r30, r24
 d80:	ec 50       	subi	r30, 0x0C	; 12
 d82:	fe 4f       	sbci	r31, 0xFE	; 254
 d84:	a5 91       	lpm	r26, Z+
 d86:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 d88:	61 11       	cpse	r22, r1
 d8a:	09 c0       	rjmp	.+18     	; 0xd9e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 d8c:	9f b7       	in	r25, 0x3f	; 63
                cli();
 d8e:	f8 94       	cli
		*reg &= ~bit;
 d90:	88 81       	ld	r24, Y
 d92:	20 95       	com	r18
 d94:	82 23       	and	r24, r18
 d96:	88 83       	st	Y, r24
		*out &= ~bit;
 d98:	ec 91       	ld	r30, X
 d9a:	2e 23       	and	r18, r30
 d9c:	0b c0       	rjmp	.+22     	; 0xdb4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 d9e:	62 30       	cpi	r22, 0x02	; 2
 da0:	61 f4       	brne	.+24     	; 0xdba <pinMode+0x66>
		uint8_t oldSREG = SREG;
 da2:	9f b7       	in	r25, 0x3f	; 63
                cli();
 da4:	f8 94       	cli
		*reg &= ~bit;
 da6:	38 81       	ld	r19, Y
 da8:	82 2f       	mov	r24, r18
 daa:	80 95       	com	r24
 dac:	83 23       	and	r24, r19
 dae:	88 83       	st	Y, r24
		*out |= bit;
 db0:	ec 91       	ld	r30, X
 db2:	2e 2b       	or	r18, r30
 db4:	2c 93       	st	X, r18
		SREG = oldSREG;
 db6:	9f bf       	out	0x3f, r25	; 63
 db8:	06 c0       	rjmp	.+12     	; 0xdc6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 dba:	8f b7       	in	r24, 0x3f	; 63
                cli();
 dbc:	f8 94       	cli
		*reg |= bit;
 dbe:	e8 81       	ld	r30, Y
 dc0:	2e 2b       	or	r18, r30
 dc2:	28 83       	st	Y, r18
		SREG = oldSREG;
 dc4:	8f bf       	out	0x3f, r24	; 63
	}
}
 dc6:	df 91       	pop	r29
 dc8:	cf 91       	pop	r28
 dca:	08 95       	ret

00000dcc <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 dcc:	1f 93       	push	r17
 dce:	cf 93       	push	r28
 dd0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 dd2:	28 2f       	mov	r18, r24
 dd4:	30 e0       	ldi	r19, 0x00	; 0
 dd6:	f9 01       	movw	r30, r18
 dd8:	e8 5f       	subi	r30, 0xF8	; 248
 dda:	fe 4f       	sbci	r31, 0xFE	; 254
 ddc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 dde:	f9 01       	movw	r30, r18
 de0:	e2 5b       	subi	r30, 0xB2	; 178
 de2:	fe 4f       	sbci	r31, 0xFE	; 254
 de4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 de6:	f9 01       	movw	r30, r18
 de8:	ec 56       	subi	r30, 0x6C	; 108
 dea:	fe 4f       	sbci	r31, 0xFE	; 254
 dec:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 dee:	cc 23       	and	r28, r28
 df0:	c1 f0       	breq	.+48     	; 0xe22 <digitalWrite+0x56>
 df2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 df4:	81 11       	cpse	r24, r1
 df6:	59 df       	rcall	.-334    	; 0xcaa <turnOffPWM>

	out = portOutputRegister(port);
 df8:	ec 2f       	mov	r30, r28
 dfa:	f0 e0       	ldi	r31, 0x00	; 0
 dfc:	ee 0f       	add	r30, r30
 dfe:	ff 1f       	adc	r31, r31
 e00:	ec 50       	subi	r30, 0x0C	; 12
 e02:	fe 4f       	sbci	r31, 0xFE	; 254
 e04:	a5 91       	lpm	r26, Z+
 e06:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 e08:	8f b7       	in	r24, 0x3f	; 63
	cli();
 e0a:	f8 94       	cli

	if (val == LOW) {
 e0c:	11 11       	cpse	r17, r1
 e0e:	05 c0       	rjmp	.+10     	; 0xe1a <digitalWrite+0x4e>
		*out &= ~bit;
 e10:	9c 91       	ld	r25, X
 e12:	ed 2f       	mov	r30, r29
 e14:	e0 95       	com	r30
 e16:	e9 23       	and	r30, r25
 e18:	02 c0       	rjmp	.+4      	; 0xe1e <digitalWrite+0x52>
	} else {
		*out |= bit;
 e1a:	ec 91       	ld	r30, X
 e1c:	ed 2b       	or	r30, r29
 e1e:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 e20:	8f bf       	out	0x3f, r24	; 63
}
 e22:	df 91       	pop	r29
 e24:	cf 91       	pop	r28
 e26:	1f 91       	pop	r17
 e28:	08 95       	ret

00000e2a <digitalRead>:

int digitalRead(uint8_t pin)
{
 e2a:	cf 93       	push	r28
 e2c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 e2e:	28 2f       	mov	r18, r24
 e30:	30 e0       	ldi	r19, 0x00	; 0
 e32:	f9 01       	movw	r30, r18
 e34:	e8 5f       	subi	r30, 0xF8	; 248
 e36:	fe 4f       	sbci	r31, 0xFE	; 254
 e38:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 e3a:	f9 01       	movw	r30, r18
 e3c:	e2 5b       	subi	r30, 0xB2	; 178
 e3e:	fe 4f       	sbci	r31, 0xFE	; 254
 e40:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 e42:	f9 01       	movw	r30, r18
 e44:	ec 56       	subi	r30, 0x6C	; 108
 e46:	fe 4f       	sbci	r31, 0xFE	; 254
 e48:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 e4a:	cc 23       	and	r28, r28
 e4c:	89 f0       	breq	.+34     	; 0xe70 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 e4e:	81 11       	cpse	r24, r1
 e50:	2c df       	rcall	.-424    	; 0xcaa <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 e52:	ec 2f       	mov	r30, r28
 e54:	f0 e0       	ldi	r31, 0x00	; 0
 e56:	ee 0f       	add	r30, r30
 e58:	ff 1f       	adc	r31, r31
 e5a:	e6 52       	subi	r30, 0x26	; 38
 e5c:	fe 4f       	sbci	r31, 0xFE	; 254
 e5e:	a5 91       	lpm	r26, Z+
 e60:	b4 91       	lpm	r27, Z
 e62:	ec 91       	ld	r30, X
 e64:	ed 23       	and	r30, r29
 e66:	81 e0       	ldi	r24, 0x01	; 1
 e68:	90 e0       	ldi	r25, 0x00	; 0
 e6a:	21 f4       	brne	.+8      	; 0xe74 <digitalRead+0x4a>
 e6c:	80 e0       	ldi	r24, 0x00	; 0
 e6e:	02 c0       	rjmp	.+4      	; 0xe74 <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 e70:	80 e0       	ldi	r24, 0x00	; 0
 e72:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 e74:	df 91       	pop	r29
 e76:	cf 91       	pop	r28
 e78:	08 95       	ret

00000e7a <__udivmodsi4>:
 e7a:	a1 e2       	ldi	r26, 0x21	; 33
 e7c:	1a 2e       	mov	r1, r26
 e7e:	aa 1b       	sub	r26, r26
 e80:	bb 1b       	sub	r27, r27
 e82:	fd 01       	movw	r30, r26
 e84:	0d c0       	rjmp	.+26     	; 0xea0 <__udivmodsi4_ep>

00000e86 <__udivmodsi4_loop>:
 e86:	aa 1f       	adc	r26, r26
 e88:	bb 1f       	adc	r27, r27
 e8a:	ee 1f       	adc	r30, r30
 e8c:	ff 1f       	adc	r31, r31
 e8e:	a2 17       	cp	r26, r18
 e90:	b3 07       	cpc	r27, r19
 e92:	e4 07       	cpc	r30, r20
 e94:	f5 07       	cpc	r31, r21
 e96:	20 f0       	brcs	.+8      	; 0xea0 <__udivmodsi4_ep>
 e98:	a2 1b       	sub	r26, r18
 e9a:	b3 0b       	sbc	r27, r19
 e9c:	e4 0b       	sbc	r30, r20
 e9e:	f5 0b       	sbc	r31, r21

00000ea0 <__udivmodsi4_ep>:
 ea0:	66 1f       	adc	r22, r22
 ea2:	77 1f       	adc	r23, r23
 ea4:	88 1f       	adc	r24, r24
 ea6:	99 1f       	adc	r25, r25
 ea8:	1a 94       	dec	r1
 eaa:	69 f7       	brne	.-38     	; 0xe86 <__udivmodsi4_loop>
 eac:	60 95       	com	r22
 eae:	70 95       	com	r23
 eb0:	80 95       	com	r24
 eb2:	90 95       	com	r25
 eb4:	9b 01       	movw	r18, r22
 eb6:	ac 01       	movw	r20, r24
 eb8:	bd 01       	movw	r22, r26
 eba:	cf 01       	movw	r24, r30
 ebc:	08 95       	ret

00000ebe <__tablejump2__>:
 ebe:	ee 0f       	add	r30, r30
 ec0:	ff 1f       	adc	r31, r31
 ec2:	88 1f       	adc	r24, r24
 ec4:	8b bf       	out	0x3b, r24	; 59
 ec6:	07 90       	elpm	r0, Z+
 ec8:	f6 91       	elpm	r31, Z
 eca:	e0 2d       	mov	r30, r0
 ecc:	19 94       	eijmp

00000ece <_exit>:
 ece:	f8 94       	cli

00000ed0 <__stop_program>:
 ed0:	ff cf       	rjmp	.-2      	; 0xed0 <__stop_program>
