
LS7366R.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000ac6  00000b5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ac6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a9  00800122  00800122  00000b7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000789b  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000173b  00000000  00000000  00008777  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000135f  00000000  00000000  00009eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000858  00000000  00000000  0000b214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d66  00000000  00000000  0000ba6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032a3  00000000  00000000  0000d7d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  00010a75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__vector_16>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 c9 02 	jmp	0x592	; 0x592 <__vector_18>
  4c:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__vector_19>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	60 01       	movw	r12, r0
  ba:	2b 03       	fmul	r18, r19

000000bc <__ctors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d8 e0       	ldi	r29, 0x08	; 8
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
  c8:	11 e0       	ldi	r17, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	e6 ec       	ldi	r30, 0xC6	; 198
  d0:	fa e0       	ldi	r31, 0x0A	; 10
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
  d4:	05 90       	lpm	r0, Z+
  d6:	0d 92       	st	X+, r0
  d8:	a2 32       	cpi	r26, 0x22	; 34
  da:	b1 07       	cpc	r27, r17
  dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	a2 e2       	ldi	r26, 0x22	; 34
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
  e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
  e8:	ab 3c       	cpi	r26, 0xCB	; 203
  ea:	b2 07       	cpc	r27, r18
  ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>

000000ee <__do_global_ctors>:
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	ce e5       	ldi	r28, 0x5E	; 94
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	04 c0       	rjmp	.+8      	; 0xfe <__do_global_ctors+0x10>
  f6:	21 97       	sbiw	r28, 0x01	; 1
  f8:	fe 01       	movw	r30, r28
  fa:	0e 94 5b 05 	call	0xab6	; 0xab6 <__tablejump2__>
  fe:	cc 35       	cpi	r28, 0x5C	; 92
 100:	d1 07       	cpc	r29, r17
 102:	c9 f7       	brne	.-14     	; 0xf6 <__do_global_ctors+0x8>
 104:	0e 94 59 03 	call	0x6b2	; 0x6b2 <main>
 108:	0c 94 61 05 	jmp	0xac2	; 0xac2 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <_ZN8SPIClass8transferEh>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
 110:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
 112:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
 114:	0d b4       	in	r0, 0x2d	; 45
 116:	07 fe       	sbrs	r0, 7
 118:	fd cf       	rjmp	.-6      	; 0x114 <_ZN8SPIClass8transferEh+0x4>
    return SPDR;
 11a:	8e b5       	in	r24, 0x2e	; 46
  }
 11c:	08 95       	ret

0000011e <_ZN7LS7366RC1Eihh>:
	digitalWrite(SS, HIGH);

};


LS7366R::LS7366R(int SelectSlave ,byte SetMDR0Bit, byte SetMDR1Bit)
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	00 d0       	rcall	.+0      	; 0x128 <_ZN7LS7366RC1Eihh+0xa>
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	8c 01       	movw	r16, r24
 12e:	86 2f       	mov	r24, r22
{
	SS = SelectSlave;
 130:	f8 01       	movw	r30, r16
 132:	60 83       	st	Z, r22
 134:	71 83       	std	Z+1, r23	; 0x01
	pinMode(SS, OUTPUT);
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	2a 83       	std	Y+2, r18	; 0x02
 13a:	49 83       	std	Y+1, r20	; 0x01
 13c:	0e 94 cd 04 	call	0x99a	; 0x99a <pinMode>
	digitalWrite(SS, HIGH);
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	f8 01       	movw	r30, r16
 144:	80 81       	ld	r24, Z
 146:	0e 94 09 05 	call	0xa12	; 0xa12 <digitalWrite>
	SPI.begin();
 14a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN8SPIClass5beginEv>
	digitalWrite(SS, LOW);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	f8 01       	movw	r30, r16
 152:	80 81       	ld	r24, Z
 154:	0e 94 09 05 	call	0xa12	; 0xa12 <digitalWrite>
	SPI.transfer(WR_MDR0);
 158:	88 e8       	ldi	r24, 0x88	; 136
 15a:	0e 94 88 00 	call	0x110	; 0x110 <_ZN8SPIClass8transferEh>
	SPI.transfer(SetMDR0Bit);
 15e:	49 81       	ldd	r20, Y+1	; 0x01
 160:	84 2f       	mov	r24, r20
 162:	0e 94 88 00 	call	0x110	; 0x110 <_ZN8SPIClass8transferEh>
	digitalWrite(SS, HIGH);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	f8 01       	movw	r30, r16
 16a:	80 81       	ld	r24, Z
 16c:	0e 94 09 05 	call	0xa12	; 0xa12 <digitalWrite>

	digitalWrite(SS, LOW);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	f8 01       	movw	r30, r16
 174:	80 81       	ld	r24, Z
 176:	0e 94 09 05 	call	0xa12	; 0xa12 <digitalWrite>
	SPI.transfer(WR_MDR1);
 17a:	80 e9       	ldi	r24, 0x90	; 144
 17c:	0e 94 88 00 	call	0x110	; 0x110 <_ZN8SPIClass8transferEh>
	SPI.transfer(SetMDR1Bit);
 180:	2a 81       	ldd	r18, Y+2	; 0x02
 182:	82 2f       	mov	r24, r18
 184:	0e 94 88 00 	call	0x110	; 0x110 <_ZN8SPIClass8transferEh>
	digitalWrite(SS, HIGH);
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	f8 01       	movw	r30, r16
 18c:	80 81       	ld	r24, Z

};
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	1f 91       	pop	r17
 198:	0f 91       	pop	r16
	digitalWrite(SS, HIGH);

	digitalWrite(SS, LOW);
	SPI.transfer(WR_MDR1);
	SPI.transfer(SetMDR1Bit);
	digitalWrite(SS, HIGH);
 19a:	0c 94 09 05 	jmp	0xa12	; 0xa12 <digitalWrite>

0000019e <_ZN7LS7366R12ResetEncoderEv>:

};

//Reset Encoder
void LS7366R::ResetEncoder() 
{
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	ec 01       	movw	r28, r24
  digitalWrite(SS, LOW);
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	88 81       	ld	r24, Y
 1a8:	0e 94 09 05 	call	0xa12	; 0xa12 <digitalWrite>
  SPI.transfer(WR_DTR);
 1ac:	88 e9       	ldi	r24, 0x98	; 152
 1ae:	0e 94 88 00 	call	0x110	; 0x110 <_ZN8SPIClass8transferEh>
  SPI.transfer(0x00);
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 88 00 	call	0x110	; 0x110 <_ZN8SPIClass8transferEh>
  SPI.transfer(0x00);
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 88 00 	call	0x110	; 0x110 <_ZN8SPIClass8transferEh>
  SPI.transfer(0x00);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 88 00 	call	0x110	; 0x110 <_ZN8SPIClass8transferEh>
  SPI.transfer(0x00);
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 88 00 	call	0x110	; 0x110 <_ZN8SPIClass8transferEh>
  digitalWrite(SS, HIGH);
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	88 81       	ld	r24, Y
 1ce:	0e 94 09 05 	call	0xa12	; 0xa12 <digitalWrite>

  digitalWrite(SS, LOW);
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	88 81       	ld	r24, Y
 1d6:	0e 94 09 05 	call	0xa12	; 0xa12 <digitalWrite>
  SPI.transfer(LD_CNTR);
 1da:	80 ee       	ldi	r24, 0xE0	; 224
 1dc:	0e 94 88 00 	call	0x110	; 0x110 <_ZN8SPIClass8transferEh>
  digitalWrite(SS, HIGH);
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	88 81       	ld	r24, Y
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
  SPI.transfer(0x00);
  digitalWrite(SS, HIGH);

  digitalWrite(SS, LOW);
  SPI.transfer(LD_CNTR);
  digitalWrite(SS, HIGH);
 1e8:	0c 94 09 05 	jmp	0xa12	; 0xa12 <digitalWrite>

000001ec <_ZN7LS7366R11ReadEncoderEv>:
}

// Read Encoder
uint32_t LS7366R::ReadEncoder() 
{
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	7c 01       	movw	r14, r24
	uint32_t count_value;
	uint32_t count_1, count_2, count_3, count_4;
		digitalWrite(SS, LOW);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	fc 01       	movw	r30, r24
 1fe:	80 81       	ld	r24, Z
 200:	0e 94 09 05 	call	0xa12	; 0xa12 <digitalWrite>
		SPI.transfer(RD_CNTR);
 204:	80 e6       	ldi	r24, 0x60	; 96
 206:	0e 94 88 00 	call	0x110	; 0x110 <_ZN8SPIClass8transferEh>
		count_1 = SPI.transfer(0x00);
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 88 00 	call	0x110	; 0x110 <_ZN8SPIClass8transferEh>
 210:	18 2f       	mov	r17, r24
		count_2 = SPI.transfer(0x00);
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 88 00 	call	0x110	; 0x110 <_ZN8SPIClass8transferEh>
 218:	08 2f       	mov	r16, r24
		count_3 = SPI.transfer(0x00);
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 88 00 	call	0x110	; 0x110 <_ZN8SPIClass8transferEh>
 220:	c8 2f       	mov	r28, r24
		count_4 = SPI.transfer(0x00);
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 88 00 	call	0x110	; 0x110 <_ZN8SPIClass8transferEh>
 228:	d8 2f       	mov	r29, r24
		digitalWrite(SS, HIGH);
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	f7 01       	movw	r30, r14
 22e:	80 81       	ld	r24, Z
 230:	0e 94 09 05 	call	0xa12	; 0xa12 <digitalWrite>
{
	uint32_t count_value;
	uint32_t count_1, count_2, count_3, count_4;
		digitalWrite(SS, LOW);
		SPI.transfer(RD_CNTR);
		count_1 = SPI.transfer(0x00);
 234:	41 2f       	mov	r20, r17
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	70 e0       	ldi	r23, 0x00	; 0
		count_2 = SPI.transfer(0x00);
		count_3 = SPI.transfer(0x00);
		count_4 = SPI.transfer(0x00);
		digitalWrite(SS, HIGH);

	count_value = (count_1 << 24) + (count_2 << 16) + (count_3 << 8) + (count_4);
 23c:	74 2f       	mov	r23, r20
 23e:	66 27       	eor	r22, r22
 240:	55 27       	eor	r21, r21
 242:	44 27       	eor	r20, r20
	uint32_t count_value;
	uint32_t count_1, count_2, count_3, count_4;
		digitalWrite(SS, LOW);
		SPI.transfer(RD_CNTR);
		count_1 = SPI.transfer(0x00);
		count_2 = SPI.transfer(0x00);
 244:	10 e0       	ldi	r17, 0x00	; 0
 246:	20 e0       	ldi	r18, 0x00	; 0
 248:	30 e0       	ldi	r19, 0x00	; 0
		count_3 = SPI.transfer(0x00);
		count_4 = SPI.transfer(0x00);
		digitalWrite(SS, HIGH);

	count_value = (count_1 << 24) + (count_2 << 16) + (count_3 << 8) + (count_4);
 24a:	98 01       	movw	r18, r16
 24c:	11 27       	eor	r17, r17
 24e:	00 27       	eor	r16, r16
 250:	40 0f       	add	r20, r16
 252:	51 1f       	adc	r21, r17
 254:	62 1f       	adc	r22, r18
 256:	73 1f       	adc	r23, r19
 258:	4d 0f       	add	r20, r29
 25a:	51 1d       	adc	r21, r1
 25c:	61 1d       	adc	r22, r1
 25e:	71 1d       	adc	r23, r1
	uint32_t count_1, count_2, count_3, count_4;
		digitalWrite(SS, LOW);
		SPI.transfer(RD_CNTR);
		count_1 = SPI.transfer(0x00);
		count_2 = SPI.transfer(0x00);
		count_3 = SPI.transfer(0x00);
 260:	8c 2f       	mov	r24, r28
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	a0 e0       	ldi	r26, 0x00	; 0
 266:	b0 e0       	ldi	r27, 0x00	; 0
		count_4 = SPI.transfer(0x00);
		digitalWrite(SS, HIGH);

	count_value = (count_1 << 24) + (count_2 << 16) + (count_3 << 8) + (count_4);
 268:	ba 2f       	mov	r27, r26
 26a:	a9 2f       	mov	r26, r25
 26c:	98 2f       	mov	r25, r24
 26e:	88 27       	eor	r24, r24
 270:	8a 01       	movw	r16, r20
 272:	9b 01       	movw	r18, r22
 274:	08 0f       	add	r16, r24
 276:	19 1f       	adc	r17, r25
 278:	2a 1f       	adc	r18, r26
 27a:	3b 1f       	adc	r19, r27
 27c:	c9 01       	movw	r24, r18
 27e:	b8 01       	movw	r22, r16

	return count_value;
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	ff 90       	pop	r15
 28a:	ef 90       	pop	r14
 28c:	08 95       	ret

0000028e <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 28e:	26 e0       	ldi	r18, 0x06	; 6
 290:	40 e8       	ldi	r20, 0x80	; 128
 292:	55 e2       	ldi	r21, 0x25	; 37
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	85 e2       	ldi	r24, 0x25	; 37
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <_ZN14HardwareSerial5beginEmh>
//End of Auto generated function prototypes by Atmel Studio

void setup()
{
Serial.begin(9600);
  enc1.ResetEncoder();
 2a0:	82 e2       	ldi	r24, 0x22	; 34
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_ZN7LS7366R12ResetEncoderEv>

000002a8 <loop>:
}

void loop()
{

  uint32_t EncoderValue1=enc1.ReadEncoder();
 2a8:	82 e2       	ldi	r24, 0x22	; 34
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN7LS7366R11ReadEncoderEv>
 2b0:	ab 01       	movw	r20, r22
 2b2:	bc 01       	movw	r22, r24
  
  Serial.println(EncoderValue1);
 2b4:	2a e0       	ldi	r18, 0x0A	; 10
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	85 e2       	ldi	r24, 0x25	; 37
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0c 94 0d 04 	jmp	0x81a	; 0x81a <_ZN5Print7printlnEmi>

000002c0 <_GLOBAL__sub_I_enc1>:
#include "LS7366R.h"
#include <SPI.h>
/*End of auto generated code by Atmel studio */
#define SSS 50

LS7366R enc1(SSS,X4_QUAD,FOUR_BYTE);
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	43 e0       	ldi	r20, 0x03	; 3
 2c4:	62 e3       	ldi	r22, 0x32	; 50
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	82 e2       	ldi	r24, 0x22	; 34
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_ZN7LS7366RC1Eihh>

000002d0 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
 2d0:	cf 93       	push	r28
  uint8_t sreg = SREG;
 2d2:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
 2d4:	f8 94       	cli
  if (!initialized) {
 2d6:	80 91 24 01 	lds	r24, 0x0124
 2da:	81 11       	cpse	r24, r1
 2dc:	27 c0       	rjmp	.+78     	; 0x32c <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
 2de:	ea e9       	ldi	r30, 0x9A	; 154
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
 2e4:	e6 e8       	ldi	r30, 0x86	; 134
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
 2ea:	e8 2f       	mov	r30, r24
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	ee 0f       	add	r30, r30
 2f0:	ff 1f       	adc	r31, r31
 2f2:	e2 55       	subi	r30, 0x52	; 82
 2f4:	ff 4f       	sbci	r31, 0xFF	; 255
 2f6:	a5 91       	lpm	r26, Z+
 2f8:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
 2fa:	ec 91       	ld	r30, X
 2fc:	e9 23       	and	r30, r25
 2fe:	21 f4       	brne	.+8      	; 0x308 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	8a e0       	ldi	r24, 0x0A	; 10
 304:	0e 94 09 05 	call	0xa12	; 0xa12 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	8a e0       	ldi	r24, 0x0A	; 10
 30c:	0e 94 cd 04 	call	0x99a	; 0x99a <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
 310:	8c b5       	in	r24, 0x2c	; 44
 312:	80 61       	ori	r24, 0x10	; 16
 314:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
 316:	8c b5       	in	r24, 0x2c	; 44
 318:	80 64       	ori	r24, 0x40	; 64
 31a:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	8d e0       	ldi	r24, 0x0D	; 13
 320:	0e 94 cd 04 	call	0x99a	; 0x99a <pinMode>
    pinMode(MOSI, OUTPUT);
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	8b e0       	ldi	r24, 0x0B	; 11
 328:	0e 94 cd 04 	call	0x99a	; 0x99a <pinMode>
  }
  initialized++; // reference count
 32c:	80 91 24 01 	lds	r24, 0x0124
 330:	8f 5f       	subi	r24, 0xFF	; 255
 332:	80 93 24 01 	sts	0x0124, r24
  SREG = sreg;
 336:	cf bf       	out	0x3f, r28	; 63
}
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 33c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 33e:	91 8d       	ldd	r25, Z+25	; 0x19
 340:	22 8d       	ldd	r18, Z+26	; 0x1a
 342:	89 2f       	mov	r24, r25
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	80 5c       	subi	r24, 0xC0	; 192
 348:	9f 4f       	sbci	r25, 0xFF	; 255
 34a:	82 1b       	sub	r24, r18
 34c:	91 09       	sbc	r25, r1
}
 34e:	8f 73       	andi	r24, 0x3F	; 63
 350:	99 27       	eor	r25, r25
 352:	08 95       	ret

00000354 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 354:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 356:	91 8d       	ldd	r25, Z+25	; 0x19
 358:	82 8d       	ldd	r24, Z+26	; 0x1a
 35a:	98 17       	cp	r25, r24
 35c:	31 f0       	breq	.+12     	; 0x36a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 35e:	82 8d       	ldd	r24, Z+26	; 0x1a
 360:	e8 0f       	add	r30, r24
 362:	f1 1d       	adc	r31, r1
 364:	85 8d       	ldd	r24, Z+29	; 0x1d
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 36e:	08 95       	ret

00000370 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 370:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 372:	91 8d       	ldd	r25, Z+25	; 0x19
 374:	82 8d       	ldd	r24, Z+26	; 0x1a
 376:	98 17       	cp	r25, r24
 378:	61 f0       	breq	.+24     	; 0x392 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 37a:	82 8d       	ldd	r24, Z+26	; 0x1a
 37c:	df 01       	movw	r26, r30
 37e:	a8 0f       	add	r26, r24
 380:	b1 1d       	adc	r27, r1
 382:	5d 96       	adiw	r26, 0x1d	; 29
 384:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 386:	92 8d       	ldd	r25, Z+26	; 0x1a
 388:	9f 5f       	subi	r25, 0xFF	; 255
 38a:	9f 73       	andi	r25, 0x3F	; 63
 38c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 392:	8f ef       	ldi	r24, 0xFF	; 255
 394:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 396:	08 95       	ret

00000398 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 398:	81 e2       	ldi	r24, 0x21	; 33
 39a:	93 e0       	ldi	r25, 0x03	; 3
 39c:	89 2b       	or	r24, r25
 39e:	49 f0       	breq	.+18     	; 0x3b2 <_Z14serialEventRunv+0x1a>
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	89 2b       	or	r24, r25
 3a6:	29 f0       	breq	.+10     	; 0x3b2 <_Z14serialEventRunv+0x1a>
 3a8:	0e 94 21 03 	call	0x642	; 0x642 <_Z17Serial0_availablev>
 3ac:	81 11       	cpse	r24, r1
 3ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 3b2:	08 95       	ret

000003b4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 3b4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 3b6:	84 8d       	ldd	r24, Z+28	; 0x1c
 3b8:	df 01       	movw	r26, r30
 3ba:	a8 0f       	add	r26, r24
 3bc:	b1 1d       	adc	r27, r1
 3be:	a3 5a       	subi	r26, 0xA3	; 163
 3c0:	bf 4f       	sbci	r27, 0xFF	; 255
 3c2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 3c4:	84 8d       	ldd	r24, Z+28	; 0x1c
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	8f 73       	andi	r24, 0x3F	; 63
 3cc:	99 27       	eor	r25, r25
 3ce:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 3d0:	a6 89       	ldd	r26, Z+22	; 0x16
 3d2:	b7 89       	ldd	r27, Z+23	; 0x17
 3d4:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 3d6:	a0 89       	ldd	r26, Z+16	; 0x10
 3d8:	b1 89       	ldd	r27, Z+17	; 0x11
 3da:	8c 91       	ld	r24, X
 3dc:	80 64       	ori	r24, 0x40	; 64
 3de:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 3e0:	93 8d       	ldd	r25, Z+27	; 0x1b
 3e2:	84 8d       	ldd	r24, Z+28	; 0x1c
 3e4:	98 13       	cpse	r25, r24
 3e6:	06 c0       	rjmp	.+12     	; 0x3f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 3e8:	02 88       	ldd	r0, Z+18	; 0x12
 3ea:	f3 89       	ldd	r31, Z+19	; 0x13
 3ec:	e0 2d       	mov	r30, r0
 3ee:	80 81       	ld	r24, Z
 3f0:	8f 7d       	andi	r24, 0xDF	; 223
 3f2:	80 83       	st	Z, r24
 3f4:	08 95       	ret

000003f6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 3fc:	88 8d       	ldd	r24, Y+24	; 0x18
 3fe:	88 23       	and	r24, r24
 400:	c9 f0       	breq	.+50     	; 0x434 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 402:	ea 89       	ldd	r30, Y+18	; 0x12
 404:	fb 89       	ldd	r31, Y+19	; 0x13
 406:	80 81       	ld	r24, Z
 408:	85 fd       	sbrc	r24, 5
 40a:	05 c0       	rjmp	.+10     	; 0x416 <_ZN14HardwareSerial5flushEv+0x20>
 40c:	a8 89       	ldd	r26, Y+16	; 0x10
 40e:	b9 89       	ldd	r27, Y+17	; 0x11
 410:	8c 91       	ld	r24, X
 412:	86 fd       	sbrc	r24, 6
 414:	0f c0       	rjmp	.+30     	; 0x434 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	07 fc       	sbrc	r0, 7
 41a:	f5 cf       	rjmp	.-22     	; 0x406 <_ZN14HardwareSerial5flushEv+0x10>
 41c:	80 81       	ld	r24, Z
 41e:	85 ff       	sbrs	r24, 5
 420:	f2 cf       	rjmp	.-28     	; 0x406 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 422:	a8 89       	ldd	r26, Y+16	; 0x10
 424:	b9 89       	ldd	r27, Y+17	; 0x11
 426:	8c 91       	ld	r24, X
 428:	85 ff       	sbrs	r24, 5
 42a:	ed cf       	rjmp	.-38     	; 0x406 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 42c:	ce 01       	movw	r24, r28
 42e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 432:	e7 cf       	rjmp	.-50     	; 0x402 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 43a:	ef 92       	push	r14
 43c:	ff 92       	push	r15
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	ec 01       	movw	r28, r24
  _written = true;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 44c:	9b 8d       	ldd	r25, Y+27	; 0x1b
 44e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 450:	98 13       	cpse	r25, r24
 452:	05 c0       	rjmp	.+10     	; 0x45e <_ZN14HardwareSerial5writeEh+0x24>
 454:	e8 89       	ldd	r30, Y+16	; 0x10
 456:	f9 89       	ldd	r31, Y+17	; 0x11
 458:	80 81       	ld	r24, Z
 45a:	85 fd       	sbrc	r24, 5
 45c:	24 c0       	rjmp	.+72     	; 0x4a6 <_ZN14HardwareSerial5writeEh+0x6c>
 45e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 460:	0b 8d       	ldd	r16, Y+27	; 0x1b
 462:	10 e0       	ldi	r17, 0x00	; 0
 464:	0f 5f       	subi	r16, 0xFF	; 255
 466:	1f 4f       	sbci	r17, 0xFF	; 255
 468:	0f 73       	andi	r16, 0x3F	; 63
 46a:	11 27       	eor	r17, r17
 46c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 46e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 470:	e8 12       	cpse	r14, r24
 472:	0c c0       	rjmp	.+24     	; 0x48c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	07 fc       	sbrc	r0, 7
 478:	fa cf       	rjmp	.-12     	; 0x46e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 47a:	e8 89       	ldd	r30, Y+16	; 0x10
 47c:	f9 89       	ldd	r31, Y+17	; 0x11
 47e:	80 81       	ld	r24, Z
 480:	85 ff       	sbrs	r24, 5
 482:	f5 cf       	rjmp	.-22     	; 0x46e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 484:	ce 01       	movw	r24, r28
 486:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 48a:	f1 cf       	rjmp	.-30     	; 0x46e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 48c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 48e:	fe 01       	movw	r30, r28
 490:	e8 0f       	add	r30, r24
 492:	f1 1d       	adc	r31, r1
 494:	e3 5a       	subi	r30, 0xA3	; 163
 496:	ff 4f       	sbci	r31, 0xFF	; 255
 498:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 49a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 49c:	ea 89       	ldd	r30, Y+18	; 0x12
 49e:	fb 89       	ldd	r31, Y+19	; 0x13
 4a0:	80 81       	ld	r24, Z
 4a2:	80 62       	ori	r24, 0x20	; 32
 4a4:	07 c0       	rjmp	.+14     	; 0x4b4 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 4a6:	ee 89       	ldd	r30, Y+22	; 0x16
 4a8:	ff 89       	ldd	r31, Y+23	; 0x17
 4aa:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 4ac:	e8 89       	ldd	r30, Y+16	; 0x10
 4ae:	f9 89       	ldd	r31, Y+17	; 0x11
 4b0:	80 81       	ld	r24, Z
 4b2:	80 64       	ori	r24, 0x40	; 64
 4b4:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	ff 90       	pop	r15
 4c4:	ef 90       	pop	r14
 4c6:	08 95       	ret

000004c8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 4c8:	cf 92       	push	r12
 4ca:	df 92       	push	r13
 4cc:	ef 92       	push	r14
 4ce:	ff 92       	push	r15
 4d0:	1f 93       	push	r17
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	ec 01       	movw	r28, r24
 4d8:	6a 01       	movw	r12, r20
 4da:	7b 01       	movw	r14, r22
 4dc:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 4de:	e8 89       	ldd	r30, Y+16	; 0x10
 4e0:	f9 89       	ldd	r31, Y+17	; 0x11
 4e2:	82 e0       	ldi	r24, 0x02	; 2
 4e4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 4e6:	41 15       	cp	r20, r1
 4e8:	51 4e       	sbci	r21, 0xE1	; 225
 4ea:	61 05       	cpc	r22, r1
 4ec:	71 05       	cpc	r23, r1
 4ee:	b1 f0       	breq	.+44     	; 0x51c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	79 e0       	ldi	r23, 0x09	; 9
 4f4:	8d e3       	ldi	r24, 0x3D	; 61
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	a7 01       	movw	r20, r14
 4fa:	96 01       	movw	r18, r12
 4fc:	0e 94 39 05 	call	0xa72	; 0xa72 <__udivmodsi4>
 500:	da 01       	movw	r26, r20
 502:	c9 01       	movw	r24, r18
 504:	01 97       	sbiw	r24, 0x01	; 1
 506:	a1 09       	sbc	r26, r1
 508:	b1 09       	sbc	r27, r1
 50a:	b6 95       	lsr	r27
 50c:	a7 95       	ror	r26
 50e:	97 95       	ror	r25
 510:	87 95       	ror	r24
 512:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 514:	41 15       	cp	r20, r1
 516:	80 e1       	ldi	r24, 0x10	; 16
 518:	58 07       	cpc	r21, r24
 51a:	a8 f0       	brcs	.+42     	; 0x546 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 51c:	e8 89       	ldd	r30, Y+16	; 0x10
 51e:	f9 89       	ldd	r31, Y+17	; 0x11
 520:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 522:	60 e8       	ldi	r22, 0x80	; 128
 524:	74 e8       	ldi	r23, 0x84	; 132
 526:	8e e1       	ldi	r24, 0x1E	; 30
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	a7 01       	movw	r20, r14
 52c:	96 01       	movw	r18, r12
 52e:	0e 94 39 05 	call	0xa72	; 0xa72 <__udivmodsi4>
 532:	ba 01       	movw	r22, r20
 534:	a9 01       	movw	r20, r18
 536:	41 50       	subi	r20, 0x01	; 1
 538:	51 09       	sbc	r21, r1
 53a:	61 09       	sbc	r22, r1
 53c:	71 09       	sbc	r23, r1
 53e:	76 95       	lsr	r23
 540:	67 95       	ror	r22
 542:	57 95       	ror	r21
 544:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 546:	ec 85       	ldd	r30, Y+12	; 0x0c
 548:	fd 85       	ldd	r31, Y+13	; 0x0d
 54a:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 54c:	ee 85       	ldd	r30, Y+14	; 0x0e
 54e:	ff 85       	ldd	r31, Y+15	; 0x0f
 550:	40 83       	st	Z, r20

  _written = false;
 552:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 554:	ec 89       	ldd	r30, Y+20	; 0x14
 556:	fd 89       	ldd	r31, Y+21	; 0x15
 558:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 55a:	ea 89       	ldd	r30, Y+18	; 0x12
 55c:	fb 89       	ldd	r31, Y+19	; 0x13
 55e:	80 81       	ld	r24, Z
 560:	80 61       	ori	r24, 0x10	; 16
 562:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 564:	ea 89       	ldd	r30, Y+18	; 0x12
 566:	fb 89       	ldd	r31, Y+19	; 0x13
 568:	80 81       	ld	r24, Z
 56a:	88 60       	ori	r24, 0x08	; 8
 56c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 56e:	ea 89       	ldd	r30, Y+18	; 0x12
 570:	fb 89       	ldd	r31, Y+19	; 0x13
 572:	80 81       	ld	r24, Z
 574:	80 68       	ori	r24, 0x80	; 128
 576:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 578:	ea 89       	ldd	r30, Y+18	; 0x12
 57a:	fb 89       	ldd	r31, Y+19	; 0x13
 57c:	80 81       	ld	r24, Z
 57e:	8f 7d       	andi	r24, 0xDF	; 223
 580:	80 83       	st	Z, r24
}
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	1f 91       	pop	r17
 588:	ff 90       	pop	r15
 58a:	ef 90       	pop	r14
 58c:	df 90       	pop	r13
 58e:	cf 90       	pop	r12
 590:	08 95       	ret

00000592 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 592:	1f 92       	push	r1
 594:	0f 92       	push	r0
 596:	0f b6       	in	r0, 0x3f	; 63
 598:	0f 92       	push	r0
 59a:	11 24       	eor	r1, r1
 59c:	2f 93       	push	r18
 59e:	8f 93       	push	r24
 5a0:	9f 93       	push	r25
 5a2:	ef 93       	push	r30
 5a4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 5a6:	e0 91 35 01 	lds	r30, 0x0135
 5aa:	f0 91 36 01 	lds	r31, 0x0136
 5ae:	80 81       	ld	r24, Z
 5b0:	e0 91 3b 01 	lds	r30, 0x013B
 5b4:	f0 91 3c 01 	lds	r31, 0x013C
 5b8:	82 fd       	sbrc	r24, 2
 5ba:	12 c0       	rjmp	.+36     	; 0x5e0 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 5bc:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 5be:	80 91 3e 01 	lds	r24, 0x013E
 5c2:	8f 5f       	subi	r24, 0xFF	; 255
 5c4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 5c6:	20 91 3f 01 	lds	r18, 0x013F
 5ca:	82 17       	cp	r24, r18
 5cc:	51 f0       	breq	.+20     	; 0x5e2 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 5ce:	e0 91 3e 01 	lds	r30, 0x013E
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	eb 5d       	subi	r30, 0xDB	; 219
 5d6:	fe 4f       	sbci	r31, 0xFE	; 254
 5d8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 5da:	80 93 3e 01 	sts	0x013E, r24
 5de:	01 c0       	rjmp	.+2      	; 0x5e2 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 5e0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 5e2:	ff 91       	pop	r31
 5e4:	ef 91       	pop	r30
 5e6:	9f 91       	pop	r25
 5e8:	8f 91       	pop	r24
 5ea:	2f 91       	pop	r18
 5ec:	0f 90       	pop	r0
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	0f 90       	pop	r0
 5f2:	1f 90       	pop	r1
 5f4:	18 95       	reti

000005f6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 5f6:	1f 92       	push	r1
 5f8:	0f 92       	push	r0
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	0f 92       	push	r0
 5fe:	11 24       	eor	r1, r1
 600:	2f 93       	push	r18
 602:	3f 93       	push	r19
 604:	4f 93       	push	r20
 606:	5f 93       	push	r21
 608:	6f 93       	push	r22
 60a:	7f 93       	push	r23
 60c:	8f 93       	push	r24
 60e:	9f 93       	push	r25
 610:	af 93       	push	r26
 612:	bf 93       	push	r27
 614:	ef 93       	push	r30
 616:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 618:	85 e2       	ldi	r24, 0x25	; 37
 61a:	91 e0       	ldi	r25, 0x01	; 1
 61c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 620:	ff 91       	pop	r31
 622:	ef 91       	pop	r30
 624:	bf 91       	pop	r27
 626:	af 91       	pop	r26
 628:	9f 91       	pop	r25
 62a:	8f 91       	pop	r24
 62c:	7f 91       	pop	r23
 62e:	6f 91       	pop	r22
 630:	5f 91       	pop	r21
 632:	4f 91       	pop	r20
 634:	3f 91       	pop	r19
 636:	2f 91       	pop	r18
 638:	0f 90       	pop	r0
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	0f 90       	pop	r0
 63e:	1f 90       	pop	r1
 640:	18 95       	reti

00000642 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 642:	85 e2       	ldi	r24, 0x25	; 37
 644:	91 e0       	ldi	r25, 0x01	; 1
 646:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN14HardwareSerial9availableEv>
 64a:	21 e0       	ldi	r18, 0x01	; 1
 64c:	89 2b       	or	r24, r25
 64e:	09 f4       	brne	.+2      	; 0x652 <_Z17Serial0_availablev+0x10>
 650:	20 e0       	ldi	r18, 0x00	; 0
}
 652:	82 2f       	mov	r24, r18
 654:	08 95       	ret

00000656 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 656:	e5 e2       	ldi	r30, 0x25	; 37
 658:	f1 e0       	ldi	r31, 0x01	; 1
 65a:	13 82       	std	Z+3, r1	; 0x03
 65c:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 65e:	88 ee       	ldi	r24, 0xE8	; 232
 660:	93 e0       	ldi	r25, 0x03	; 3
 662:	a0 e0       	ldi	r26, 0x00	; 0
 664:	b0 e0       	ldi	r27, 0x00	; 0
 666:	84 83       	std	Z+4, r24	; 0x04
 668:	95 83       	std	Z+5, r25	; 0x05
 66a:	a6 83       	std	Z+6, r26	; 0x06
 66c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 66e:	84 e0       	ldi	r24, 0x04	; 4
 670:	91 e0       	ldi	r25, 0x01	; 1
 672:	91 83       	std	Z+1, r25	; 0x01
 674:	80 83       	st	Z, r24
 676:	85 ec       	ldi	r24, 0xC5	; 197
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	95 87       	std	Z+13, r25	; 0x0d
 67c:	84 87       	std	Z+12, r24	; 0x0c
 67e:	84 ec       	ldi	r24, 0xC4	; 196
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	97 87       	std	Z+15, r25	; 0x0f
 684:	86 87       	std	Z+14, r24	; 0x0e
 686:	80 ec       	ldi	r24, 0xC0	; 192
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	91 8b       	std	Z+17, r25	; 0x11
 68c:	80 8b       	std	Z+16, r24	; 0x10
 68e:	81 ec       	ldi	r24, 0xC1	; 193
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	93 8b       	std	Z+19, r25	; 0x13
 694:	82 8b       	std	Z+18, r24	; 0x12
 696:	82 ec       	ldi	r24, 0xC2	; 194
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	95 8b       	std	Z+21, r25	; 0x15
 69c:	84 8b       	std	Z+20, r24	; 0x14
 69e:	86 ec       	ldi	r24, 0xC6	; 198
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	97 8b       	std	Z+23, r25	; 0x17
 6a4:	86 8b       	std	Z+22, r24	; 0x16
 6a6:	11 8e       	std	Z+25, r1	; 0x19
 6a8:	12 8e       	std	Z+26, r1	; 0x1a
 6aa:	13 8e       	std	Z+27, r1	; 0x1b
 6ac:	14 8e       	std	Z+28, r1	; 0x1c
 6ae:	08 95       	ret

000006b0 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 6b0:	08 95       	ret

000006b2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 6b2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <init>

	initVariant();
 6b6:	0e 94 58 03 	call	0x6b0	; 0x6b0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 6ba:	0e 94 47 01 	call	0x28e	; 0x28e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 6be:	cc ec       	ldi	r28, 0xCC	; 204
 6c0:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 6c2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <loop>
		if (serialEventRun) serialEventRun();
 6c6:	20 97       	sbiw	r28, 0x00	; 0
 6c8:	e1 f3       	breq	.-8      	; 0x6c2 <main+0x10>
 6ca:	0e 94 cc 01 	call	0x398	; 0x398 <_Z14serialEventRunv>
 6ce:	f9 cf       	rjmp	.-14     	; 0x6c2 <main+0x10>

000006d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 6d0:	cf 92       	push	r12
 6d2:	df 92       	push	r13
 6d4:	ef 92       	push	r14
 6d6:	ff 92       	push	r15
 6d8:	0f 93       	push	r16
 6da:	1f 93       	push	r17
 6dc:	cf 93       	push	r28
 6de:	df 93       	push	r29
 6e0:	6c 01       	movw	r12, r24
 6e2:	7a 01       	movw	r14, r20
 6e4:	8b 01       	movw	r16, r22
  size_t n = 0;
 6e6:	c0 e0       	ldi	r28, 0x00	; 0
 6e8:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 6ea:	ce 15       	cp	r28, r14
 6ec:	df 05       	cpc	r29, r15
 6ee:	89 f0       	breq	.+34     	; 0x712 <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
 6f0:	d8 01       	movw	r26, r16
 6f2:	6d 91       	ld	r22, X+
 6f4:	8d 01       	movw	r16, r26
 6f6:	d6 01       	movw	r26, r12
 6f8:	ed 91       	ld	r30, X+
 6fa:	fc 91       	ld	r31, X
 6fc:	01 90       	ld	r0, Z+
 6fe:	f0 81       	ld	r31, Z
 700:	e0 2d       	mov	r30, r0
 702:	c6 01       	movw	r24, r12
 704:	09 95       	icall
 706:	89 2b       	or	r24, r25
 708:	11 f4       	brne	.+4      	; 0x70e <_ZN5Print5writeEPKhj+0x3e>
 70a:	7e 01       	movw	r14, r28
 70c:	02 c0       	rjmp	.+4      	; 0x712 <_ZN5Print5writeEPKhj+0x42>
 70e:	21 96       	adiw	r28, 0x01	; 1
 710:	ec cf       	rjmp	.-40     	; 0x6ea <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
 712:	c7 01       	movw	r24, r14
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	1f 91       	pop	r17
 71a:	0f 91       	pop	r16
 71c:	ff 90       	pop	r15
 71e:	ef 90       	pop	r14
 720:	df 90       	pop	r13
 722:	cf 90       	pop	r12
 724:	08 95       	ret

00000726 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 726:	61 15       	cp	r22, r1
 728:	71 05       	cpc	r23, r1
 72a:	79 f0       	breq	.+30     	; 0x74a <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
 72c:	fb 01       	movw	r30, r22
 72e:	01 90       	ld	r0, Z+
 730:	00 20       	and	r0, r0
 732:	e9 f7       	brne	.-6      	; 0x72e <_ZN5Print5writeEPKc+0x8>
 734:	31 97       	sbiw	r30, 0x01	; 1
 736:	af 01       	movw	r20, r30
 738:	46 1b       	sub	r20, r22
 73a:	57 0b       	sbc	r21, r23
 73c:	dc 01       	movw	r26, r24
 73e:	ed 91       	ld	r30, X+
 740:	fc 91       	ld	r31, X
 742:	02 80       	ldd	r0, Z+2	; 0x02
 744:	f3 81       	ldd	r31, Z+3	; 0x03
 746:	e0 2d       	mov	r30, r0
 748:	09 94       	ijmp
    }
 74a:	80 e0       	ldi	r24, 0x00	; 0
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	08 95       	ret

00000750 <_ZN5Print7printlnEv>:
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
 750:	60 e1       	ldi	r22, 0x10	; 16
 752:	71 e0       	ldi	r23, 0x01	; 1
 754:	0c 94 93 03 	jmp	0x726	; 0x726 <_ZN5Print5writeEPKc>

00000758 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
 758:	8f 92       	push	r8
 75a:	9f 92       	push	r9
 75c:	af 92       	push	r10
 75e:	bf 92       	push	r11
 760:	cf 92       	push	r12
 762:	df 92       	push	r13
 764:	ef 92       	push	r14
 766:	ff 92       	push	r15
 768:	0f 93       	push	r16
 76a:	1f 93       	push	r17
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
 770:	cd b7       	in	r28, 0x3d	; 61
 772:	de b7       	in	r29, 0x3e	; 62
 774:	a1 97       	sbiw	r28, 0x21	; 33
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	f8 94       	cli
 77a:	de bf       	out	0x3e, r29	; 62
 77c:	0f be       	out	0x3f, r0	; 63
 77e:	cd bf       	out	0x3d, r28	; 61
 780:	7c 01       	movw	r14, r24
 782:	d4 2e       	mov	r13, r20
 784:	c5 2e       	mov	r12, r21
 786:	db 01       	movw	r26, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 788:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 78a:	22 30       	cpi	r18, 0x02	; 2
 78c:	08 f4       	brcc	.+2      	; 0x790 <_ZN5Print11printNumberEmh+0x38>
 78e:	2a e0       	ldi	r18, 0x0A	; 10
 790:	8e 01       	movw	r16, r28
 792:	0f 5d       	subi	r16, 0xDF	; 223
 794:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
 796:	82 2e       	mov	r8, r18
 798:	91 2c       	mov	r9, r1
 79a:	a1 2c       	mov	r10, r1
 79c:	b1 2c       	mov	r11, r1
 79e:	6d 2d       	mov	r22, r13
 7a0:	7c 2d       	mov	r23, r12
 7a2:	cd 01       	movw	r24, r26
 7a4:	a5 01       	movw	r20, r10
 7a6:	94 01       	movw	r18, r8
 7a8:	0e 94 39 05 	call	0xa72	; 0xa72 <__udivmodsi4>
    n /= base;
 7ac:	d2 2e       	mov	r13, r18
 7ae:	c3 2e       	mov	r12, r19
 7b0:	da 01       	movw	r26, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 7b2:	01 50       	subi	r16, 0x01	; 1
 7b4:	11 09       	sbc	r17, r1
 7b6:	6a 30       	cpi	r22, 0x0A	; 10
 7b8:	71 05       	cpc	r23, r1
 7ba:	81 05       	cpc	r24, r1
 7bc:	91 05       	cpc	r25, r1
 7be:	10 f4       	brcc	.+4      	; 0x7c4 <_ZN5Print11printNumberEmh+0x6c>
 7c0:	60 5d       	subi	r22, 0xD0	; 208
 7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <_ZN5Print11printNumberEmh+0x6e>
 7c4:	69 5c       	subi	r22, 0xC9	; 201
 7c6:	f8 01       	movw	r30, r16
 7c8:	60 83       	st	Z, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 7ca:	23 2b       	or	r18, r19
 7cc:	24 2b       	or	r18, r20
 7ce:	25 2b       	or	r18, r21
 7d0:	31 f7       	brne	.-52     	; 0x79e <_ZN5Print11printNumberEmh+0x46>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 7d2:	b8 01       	movw	r22, r16
 7d4:	c7 01       	movw	r24, r14
 7d6:	0e 94 93 03 	call	0x726	; 0x726 <_ZN5Print5writeEPKc>
}
 7da:	a1 96       	adiw	r28, 0x21	; 33
 7dc:	0f b6       	in	r0, 0x3f	; 63
 7de:	f8 94       	cli
 7e0:	de bf       	out	0x3e, r29	; 62
 7e2:	0f be       	out	0x3f, r0	; 63
 7e4:	cd bf       	out	0x3d, r28	; 61
 7e6:	df 91       	pop	r29
 7e8:	cf 91       	pop	r28
 7ea:	1f 91       	pop	r17
 7ec:	0f 91       	pop	r16
 7ee:	ff 90       	pop	r15
 7f0:	ef 90       	pop	r14
 7f2:	df 90       	pop	r13
 7f4:	cf 90       	pop	r12
 7f6:	bf 90       	pop	r11
 7f8:	af 90       	pop	r10
 7fa:	9f 90       	pop	r9
 7fc:	8f 90       	pop	r8
 7fe:	08 95       	ret

00000800 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 800:	21 15       	cp	r18, r1
 802:	31 05       	cpc	r19, r1
 804:	41 f4       	brne	.+16     	; 0x816 <_ZN5Print5printEmi+0x16>
 806:	dc 01       	movw	r26, r24
 808:	ed 91       	ld	r30, X+
 80a:	fc 91       	ld	r31, X
 80c:	01 90       	ld	r0, Z+
 80e:	f0 81       	ld	r31, Z
 810:	e0 2d       	mov	r30, r0
 812:	64 2f       	mov	r22, r20
 814:	09 94       	ijmp
  else return printNumber(n, base);
 816:	0c 94 ac 03 	jmp	0x758	; 0x758 <_ZN5Print11printNumberEmh>

0000081a <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 81a:	0f 93       	push	r16
 81c:	1f 93       	push	r17
 81e:	cf 93       	push	r28
 820:	df 93       	push	r29
 822:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 824:	0e 94 00 04 	call	0x800	; 0x800 <_ZN5Print5printEmi>
 828:	8c 01       	movw	r16, r24
  n += println();
 82a:	ce 01       	movw	r24, r28
 82c:	0e 94 a8 03 	call	0x750	; 0x750 <_ZN5Print7printlnEv>
  return n;
}
 830:	80 0f       	add	r24, r16
 832:	91 1f       	adc	r25, r17
 834:	df 91       	pop	r29
 836:	cf 91       	pop	r28
 838:	1f 91       	pop	r17
 83a:	0f 91       	pop	r16
 83c:	08 95       	ret

0000083e <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 83e:	1f 92       	push	r1
 840:	0f 92       	push	r0
 842:	0f b6       	in	r0, 0x3f	; 63
 844:	0f 92       	push	r0
 846:	11 24       	eor	r1, r1
 848:	2f 93       	push	r18
 84a:	3f 93       	push	r19
 84c:	8f 93       	push	r24
 84e:	9f 93       	push	r25
 850:	af 93       	push	r26
 852:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 854:	80 91 c3 01 	lds	r24, 0x01C3
 858:	90 91 c4 01 	lds	r25, 0x01C4
 85c:	a0 91 c5 01 	lds	r26, 0x01C5
 860:	b0 91 c6 01 	lds	r27, 0x01C6
	unsigned char f = timer0_fract;
 864:	30 91 c2 01 	lds	r19, 0x01C2

	m += MILLIS_INC;
	f += FRACT_INC;
 868:	23 e0       	ldi	r18, 0x03	; 3
 86a:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 86c:	2d 37       	cpi	r18, 0x7D	; 125
 86e:	20 f4       	brcc	.+8      	; 0x878 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 870:	01 96       	adiw	r24, 0x01	; 1
 872:	a1 1d       	adc	r26, r1
 874:	b1 1d       	adc	r27, r1
 876:	05 c0       	rjmp	.+10     	; 0x882 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 878:	26 e8       	ldi	r18, 0x86	; 134
 87a:	23 0f       	add	r18, r19
		m += 1;
 87c:	02 96       	adiw	r24, 0x02	; 2
 87e:	a1 1d       	adc	r26, r1
 880:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 882:	20 93 c2 01 	sts	0x01C2, r18
	timer0_millis = m;
 886:	80 93 c3 01 	sts	0x01C3, r24
 88a:	90 93 c4 01 	sts	0x01C4, r25
 88e:	a0 93 c5 01 	sts	0x01C5, r26
 892:	b0 93 c6 01 	sts	0x01C6, r27
	timer0_overflow_count++;
 896:	80 91 c7 01 	lds	r24, 0x01C7
 89a:	90 91 c8 01 	lds	r25, 0x01C8
 89e:	a0 91 c9 01 	lds	r26, 0x01C9
 8a2:	b0 91 ca 01 	lds	r27, 0x01CA
 8a6:	01 96       	adiw	r24, 0x01	; 1
 8a8:	a1 1d       	adc	r26, r1
 8aa:	b1 1d       	adc	r27, r1
 8ac:	80 93 c7 01 	sts	0x01C7, r24
 8b0:	90 93 c8 01 	sts	0x01C8, r25
 8b4:	a0 93 c9 01 	sts	0x01C9, r26
 8b8:	b0 93 ca 01 	sts	0x01CA, r27
}
 8bc:	bf 91       	pop	r27
 8be:	af 91       	pop	r26
 8c0:	9f 91       	pop	r25
 8c2:	8f 91       	pop	r24
 8c4:	3f 91       	pop	r19
 8c6:	2f 91       	pop	r18
 8c8:	0f 90       	pop	r0
 8ca:	0f be       	out	0x3f, r0	; 63
 8cc:	0f 90       	pop	r0
 8ce:	1f 90       	pop	r1
 8d0:	18 95       	reti

000008d2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 8d2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 8d4:	84 b5       	in	r24, 0x24	; 36
 8d6:	82 60       	ori	r24, 0x02	; 2
 8d8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 8da:	84 b5       	in	r24, 0x24	; 36
 8dc:	81 60       	ori	r24, 0x01	; 1
 8de:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 8e0:	85 b5       	in	r24, 0x25	; 37
 8e2:	82 60       	ori	r24, 0x02	; 2
 8e4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 8e6:	85 b5       	in	r24, 0x25	; 37
 8e8:	81 60       	ori	r24, 0x01	; 1
 8ea:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 8ec:	ee e6       	ldi	r30, 0x6E	; 110
 8ee:	f0 e0       	ldi	r31, 0x00	; 0
 8f0:	80 81       	ld	r24, Z
 8f2:	81 60       	ori	r24, 0x01	; 1
 8f4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 8f6:	e1 e8       	ldi	r30, 0x81	; 129
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 8fc:	80 81       	ld	r24, Z
 8fe:	82 60       	ori	r24, 0x02	; 2
 900:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 902:	80 81       	ld	r24, Z
 904:	81 60       	ori	r24, 0x01	; 1
 906:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 908:	e0 e8       	ldi	r30, 0x80	; 128
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	80 81       	ld	r24, Z
 90e:	81 60       	ori	r24, 0x01	; 1
 910:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 912:	e1 eb       	ldi	r30, 0xB1	; 177
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	80 81       	ld	r24, Z
 918:	84 60       	ori	r24, 0x04	; 4
 91a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 91c:	e0 eb       	ldi	r30, 0xB0	; 176
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	80 81       	ld	r24, Z
 922:	81 60       	ori	r24, 0x01	; 1
 924:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 926:	ea e7       	ldi	r30, 0x7A	; 122
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	80 81       	ld	r24, Z
 92c:	84 60       	ori	r24, 0x04	; 4
 92e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 930:	80 81       	ld	r24, Z
 932:	82 60       	ori	r24, 0x02	; 2
 934:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 936:	80 81       	ld	r24, Z
 938:	81 60       	ori	r24, 0x01	; 1
 93a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 93c:	80 81       	ld	r24, Z
 93e:	80 68       	ori	r24, 0x80	; 128
 940:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 942:	10 92 c1 00 	sts	0x00C1, r1
 946:	08 95       	ret

00000948 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 948:	83 30       	cpi	r24, 0x03	; 3
 94a:	81 f0       	breq	.+32     	; 0x96c <turnOffPWM+0x24>
 94c:	28 f4       	brcc	.+10     	; 0x958 <turnOffPWM+0x10>
 94e:	81 30       	cpi	r24, 0x01	; 1
 950:	99 f0       	breq	.+38     	; 0x978 <turnOffPWM+0x30>
 952:	82 30       	cpi	r24, 0x02	; 2
 954:	a1 f0       	breq	.+40     	; 0x97e <turnOffPWM+0x36>
 956:	08 95       	ret
 958:	87 30       	cpi	r24, 0x07	; 7
 95a:	a9 f0       	breq	.+42     	; 0x986 <turnOffPWM+0x3e>
 95c:	88 30       	cpi	r24, 0x08	; 8
 95e:	b9 f0       	breq	.+46     	; 0x98e <turnOffPWM+0x46>
 960:	84 30       	cpi	r24, 0x04	; 4
 962:	d1 f4       	brne	.+52     	; 0x998 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 964:	80 91 80 00 	lds	r24, 0x0080
 968:	8f 7d       	andi	r24, 0xDF	; 223
 96a:	03 c0       	rjmp	.+6      	; 0x972 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 96c:	80 91 80 00 	lds	r24, 0x0080
 970:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 972:	80 93 80 00 	sts	0x0080, r24
 976:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 978:	84 b5       	in	r24, 0x24	; 36
 97a:	8f 77       	andi	r24, 0x7F	; 127
 97c:	02 c0       	rjmp	.+4      	; 0x982 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 97e:	84 b5       	in	r24, 0x24	; 36
 980:	8f 7d       	andi	r24, 0xDF	; 223
 982:	84 bd       	out	0x24, r24	; 36
 984:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 986:	80 91 b0 00 	lds	r24, 0x00B0
 98a:	8f 77       	andi	r24, 0x7F	; 127
 98c:	03 c0       	rjmp	.+6      	; 0x994 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 98e:	80 91 b0 00 	lds	r24, 0x00B0
 992:	8f 7d       	andi	r24, 0xDF	; 223
 994:	80 93 b0 00 	sts	0x00B0, r24
 998:	08 95       	ret

0000099a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 99a:	cf 93       	push	r28
 99c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	fc 01       	movw	r30, r24
 9a2:	e4 58       	subi	r30, 0x84	; 132
 9a4:	ff 4f       	sbci	r31, 0xFF	; 255
 9a6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 9a8:	fc 01       	movw	r30, r24
 9aa:	e0 57       	subi	r30, 0x70	; 112
 9ac:	ff 4f       	sbci	r31, 0xFF	; 255
 9ae:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 9b0:	88 23       	and	r24, r24
 9b2:	61 f1       	breq	.+88     	; 0xa0c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	88 0f       	add	r24, r24
 9b8:	99 1f       	adc	r25, r25
 9ba:	fc 01       	movw	r30, r24
 9bc:	e2 55       	subi	r30, 0x52	; 82
 9be:	ff 4f       	sbci	r31, 0xFF	; 255
 9c0:	c5 91       	lpm	r28, Z+
 9c2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 9c4:	fc 01       	movw	r30, r24
 9c6:	ec 55       	subi	r30, 0x5C	; 92
 9c8:	ff 4f       	sbci	r31, 0xFF	; 255
 9ca:	a5 91       	lpm	r26, Z+
 9cc:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 9ce:	61 11       	cpse	r22, r1
 9d0:	09 c0       	rjmp	.+18     	; 0x9e4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 9d2:	9f b7       	in	r25, 0x3f	; 63
                cli();
 9d4:	f8 94       	cli
		*reg &= ~bit;
 9d6:	88 81       	ld	r24, Y
 9d8:	20 95       	com	r18
 9da:	82 23       	and	r24, r18
 9dc:	88 83       	st	Y, r24
		*out &= ~bit;
 9de:	ec 91       	ld	r30, X
 9e0:	2e 23       	and	r18, r30
 9e2:	0b c0       	rjmp	.+22     	; 0x9fa <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 9e4:	62 30       	cpi	r22, 0x02	; 2
 9e6:	61 f4       	brne	.+24     	; 0xa00 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 9e8:	9f b7       	in	r25, 0x3f	; 63
                cli();
 9ea:	f8 94       	cli
		*reg &= ~bit;
 9ec:	38 81       	ld	r19, Y
 9ee:	82 2f       	mov	r24, r18
 9f0:	80 95       	com	r24
 9f2:	83 23       	and	r24, r19
 9f4:	88 83       	st	Y, r24
		*out |= bit;
 9f6:	ec 91       	ld	r30, X
 9f8:	2e 2b       	or	r18, r30
 9fa:	2c 93       	st	X, r18
		SREG = oldSREG;
 9fc:	9f bf       	out	0x3f, r25	; 63
 9fe:	06 c0       	rjmp	.+12     	; 0xa0c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 a00:	8f b7       	in	r24, 0x3f	; 63
                cli();
 a02:	f8 94       	cli
		*reg |= bit;
 a04:	e8 81       	ld	r30, Y
 a06:	2e 2b       	or	r18, r30
 a08:	28 83       	st	Y, r18
		SREG = oldSREG;
 a0a:	8f bf       	out	0x3f, r24	; 63
	}
}
 a0c:	df 91       	pop	r29
 a0e:	cf 91       	pop	r28
 a10:	08 95       	ret

00000a12 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 a12:	1f 93       	push	r17
 a14:	cf 93       	push	r28
 a16:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 a18:	28 2f       	mov	r18, r24
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	f9 01       	movw	r30, r18
 a1e:	e8 59       	subi	r30, 0x98	; 152
 a20:	ff 4f       	sbci	r31, 0xFF	; 255
 a22:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 a24:	f9 01       	movw	r30, r18
 a26:	e4 58       	subi	r30, 0x84	; 132
 a28:	ff 4f       	sbci	r31, 0xFF	; 255
 a2a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 a2c:	f9 01       	movw	r30, r18
 a2e:	e0 57       	subi	r30, 0x70	; 112
 a30:	ff 4f       	sbci	r31, 0xFF	; 255
 a32:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 a34:	cc 23       	and	r28, r28
 a36:	c9 f0       	breq	.+50     	; 0xa6a <digitalWrite+0x58>
 a38:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 a3a:	81 11       	cpse	r24, r1
 a3c:	0e 94 a4 04 	call	0x948	; 0x948 <turnOffPWM>

	out = portOutputRegister(port);
 a40:	ec 2f       	mov	r30, r28
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	ee 0f       	add	r30, r30
 a46:	ff 1f       	adc	r31, r31
 a48:	ec 55       	subi	r30, 0x5C	; 92
 a4a:	ff 4f       	sbci	r31, 0xFF	; 255
 a4c:	a5 91       	lpm	r26, Z+
 a4e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 a50:	8f b7       	in	r24, 0x3f	; 63
	cli();
 a52:	f8 94       	cli

	if (val == LOW) {
 a54:	11 11       	cpse	r17, r1
 a56:	05 c0       	rjmp	.+10     	; 0xa62 <digitalWrite+0x50>
		*out &= ~bit;
 a58:	9c 91       	ld	r25, X
 a5a:	ed 2f       	mov	r30, r29
 a5c:	e0 95       	com	r30
 a5e:	e9 23       	and	r30, r25
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <digitalWrite+0x54>
	} else {
		*out |= bit;
 a62:	ec 91       	ld	r30, X
 a64:	ed 2b       	or	r30, r29
 a66:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 a68:	8f bf       	out	0x3f, r24	; 63
}
 a6a:	df 91       	pop	r29
 a6c:	cf 91       	pop	r28
 a6e:	1f 91       	pop	r17
 a70:	08 95       	ret

00000a72 <__udivmodsi4>:
 a72:	a1 e2       	ldi	r26, 0x21	; 33
 a74:	1a 2e       	mov	r1, r26
 a76:	aa 1b       	sub	r26, r26
 a78:	bb 1b       	sub	r27, r27
 a7a:	fd 01       	movw	r30, r26
 a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__udivmodsi4_ep>

00000a7e <__udivmodsi4_loop>:
 a7e:	aa 1f       	adc	r26, r26
 a80:	bb 1f       	adc	r27, r27
 a82:	ee 1f       	adc	r30, r30
 a84:	ff 1f       	adc	r31, r31
 a86:	a2 17       	cp	r26, r18
 a88:	b3 07       	cpc	r27, r19
 a8a:	e4 07       	cpc	r30, r20
 a8c:	f5 07       	cpc	r31, r21
 a8e:	20 f0       	brcs	.+8      	; 0xa98 <__udivmodsi4_ep>
 a90:	a2 1b       	sub	r26, r18
 a92:	b3 0b       	sbc	r27, r19
 a94:	e4 0b       	sbc	r30, r20
 a96:	f5 0b       	sbc	r31, r21

00000a98 <__udivmodsi4_ep>:
 a98:	66 1f       	adc	r22, r22
 a9a:	77 1f       	adc	r23, r23
 a9c:	88 1f       	adc	r24, r24
 a9e:	99 1f       	adc	r25, r25
 aa0:	1a 94       	dec	r1
 aa2:	69 f7       	brne	.-38     	; 0xa7e <__udivmodsi4_loop>
 aa4:	60 95       	com	r22
 aa6:	70 95       	com	r23
 aa8:	80 95       	com	r24
 aaa:	90 95       	com	r25
 aac:	9b 01       	movw	r18, r22
 aae:	ac 01       	movw	r20, r24
 ab0:	bd 01       	movw	r22, r26
 ab2:	cf 01       	movw	r24, r30
 ab4:	08 95       	ret

00000ab6 <__tablejump2__>:
 ab6:	ee 0f       	add	r30, r30
 ab8:	ff 1f       	adc	r31, r31
 aba:	05 90       	lpm	r0, Z+
 abc:	f4 91       	lpm	r31, Z
 abe:	e0 2d       	mov	r30, r0
 ac0:	09 94       	ijmp

00000ac2 <_exit>:
 ac2:	f8 94       	cli

00000ac4 <__stop_program>:
 ac4:	ff cf       	rjmp	.-2      	; 0xac4 <__stop_program>
